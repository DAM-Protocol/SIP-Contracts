{
  "address": "0xdD5cF237E227D339A53174ED77DcA13592529dcd",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "CoreDeactivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "CoreReactivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ISuperToken",
          "name": "superToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "StreamModified",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISuperToken",
          "name": "_superToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_agreementClass",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_cbdata",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_ctx",
          "type": "bytes"
        }
      ],
      "name": "afterAgreementCreated",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "_newCtx",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISuperToken",
          "name": "_superToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_agreementClass",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_cbdata",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_ctx",
          "type": "bytes"
        }
      ],
      "name": "afterAgreementTerminated",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "_newCtx",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISuperToken",
          "name": "_superToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_agreementClass",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_cbdata",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_ctx",
          "type": "bytes"
        }
      ],
      "name": "afterAgreementUpdated",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "_newCtx",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISuperToken",
          "name": "_superToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "beforeAgreementCreated",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "_cbdata",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISuperToken",
          "name": "_superToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_agreementClass",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_ctx",
          "type": "bytes"
        }
      ],
      "name": "beforeAgreementTerminated",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "_cbdata",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISuperToken",
          "name": "_superToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_agreementClass",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_ctx",
          "type": "bytes"
        }
      ],
      "name": "beforeAgreementUpdated",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "_cbdata",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "calcUserUninvested",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkCoreActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "dHedgeDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_message",
          "type": "string"
        }
      ],
      "name": "deactivateCore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "distribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISuperToken",
          "name": "_superToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "emergencyCloseStream",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getTokenDistIndices",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getUserDistIndex",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISuperToken",
          "name": "_superToken",
          "type": "address"
        }
      ],
      "name": "initStreamToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dHedgePool",
          "type": "address"
        },
        {
          "internalType": "contract ISuperToken",
          "name": "_DHPTx",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_message",
          "type": "string"
        }
      ],
      "name": "reactivateCore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requireUpkeep",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe46601f5cf11ad71096c9168937044429e84726ecedca0861d2dd1679d8a4e4f",
  "receipt": {
    "to": null,
    "from": "0x452181dAe31Cf9f42189df71eC64298993BEe6d3",
    "contractAddress": "0xdD5cF237E227D339A53174ED77DcA13592529dcd",
    "transactionIndex": 30,
    "gasUsed": "1729736",
    "logsBloom": "0x
    "blockHash": "0xe6a78cac45cf6abe10fe1d991a8f7f9d5e25f4d30b64593bcad3393ec3003037",
    "transactionHash": "0xe46601f5cf11ad71096c9168937044429e84726ecedca0861d2dd1679d8a4e4f",
    "logs": [
      {
        "transactionIndex": 30,
        "blockNumber": 27271995,
        "transactionHash": "0xe46601f5cf11ad71096c9168937044429e84726ecedca0861d2dd1679d8a4e4f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000452181dae31cf9f42189df71ec64298993bee6d3",
          "0x000000000000000000000000127685d6dd6683085da4b6a041efcef1681e5c9c"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001cfb1513d9904300000000000000000000000000000000000000000000000001ded87275829865d00000000000000000000000000000000000000000000071632184a9db6a7295a0000000000000000000000000000000000000000000000001c1dd5d61a90822d00000000000000000000000000000000000000000000071633e7fbeef4402d8a",
        "logIndex": 111,
        "blockHash": "0xe6a78cac45cf6abe10fe1d991a8f7f9d5e25f4d30b64593bcad3393ec3003037"
      }
    ],
    "blockNumber": 27271995,
    "cumulativeGasUsed": "6357192",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "d65ae0d8336375d5daab3da8fe22411e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"CoreDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"CoreReactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"StreamModified\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"_superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_cbdata\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_ctx\",\"type\":\"bytes\"}],\"name\":\"afterAgreementCreated\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"_newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"_superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_cbdata\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_ctx\",\"type\":\"bytes\"}],\"name\":\"afterAgreementTerminated\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"_newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"_superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_cbdata\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_ctx\",\"type\":\"bytes\"}],\"name\":\"afterAgreementUpdated\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"_newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"_superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"beforeAgreementCreated\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"_cbdata\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"_superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_ctx\",\"type\":\"bytes\"}],\"name\":\"beforeAgreementTerminated\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"_cbdata\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"_superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_ctx\",\"type\":\"bytes\"}],\"name\":\"beforeAgreementUpdated\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"_cbdata\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"calcUserUninvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkCoreActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"dHedgeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"deactivateCore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"_superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"emergencyCloseStream\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTokenDistIndices\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getUserDistIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"_superToken\",\"type\":\"address\"}],\"name\":\"initStreamToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dHedgePool\",\"type\":\"address\"},{\"internalType\":\"contract ISuperToken\",\"name\":\"_DHPTx\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"reactivateCore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requireUpkeep\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"rashtrakoff <rashtrakoff@pm.me>.\",\"custom:experimental\":\"This is an experimental contract/library. Use at your own risk.\",\"kind\":\"dev\",\"methods\":{\"beforeAgreementCreated(address,address,bytes32,bytes,bytes)\":{\"details\":\"TODO Check if `_onlyExpected` is even required.\"},\"calcUserUninvested(address,address)\":{\"params\":{\"_token\":\"Address of the underlying token.\",\"_user\":\"Address of the user whose uninvested amount needs to be calculated.\"},\"returns\":{\"_0\":\"Amount of uninvested tokens.\"}},\"checkCoreActive()\":{\"returns\":{\"_0\":\"Boolean indicating working status of core.\"}},\"dHedgeDeposit(address)\":{\"params\":{\"_token\":\"Address of the underlying token to be deposited into dHedge pool.\"}},\"deactivateCore(string)\":{\"params\":{\"_message\":\"Message reason for reactivation of the core.\"}},\"distribute(address)\":{\"params\":{\"_token\":\"Address of the underlying token.\"}},\"emergencyCloseStream(address,address)\":{\"params\":{\"_superToken\":\"Supertoken being streamed.\",\"_user\":\"Address of the user whose stream needs to be closed.\"}},\"emergencyWithdraw(address)\":{\"params\":{\"_token\":\"Address of the pool token. TODO Remove/Modify this function after testing\"}},\"getTokenDistIndices(address)\":{\"params\":{\"_token\":\"Address of a deposit token.\"},\"returns\":{\"_0\":\"Index ID of first permanent index.\",\"_1\":\"Index ID of second permanent index.\",\"_2\":\"Index ID of temporary index.\",\"_3\":\"Index ID of the locked index.\"}},\"getUserDistIndex(address,address)\":{\"params\":{\"_token\":\"Address of the underlying token for which the permanent distribution index ID is required.\",\"_user\":\"Address of the user.\"},\"returns\":{\"_0\":\"Assigned permanent distribution index ID.\"}},\"initStreamToken(address)\":{\"params\":{\"_superToken\":\"Supertoken of the underlying token we wish to stream.\"}},\"initialize(address,address)\":{\"details\":\"Initialize the factory.\",\"params\":{\"_DHPTx\":\"Supertoken corresponding to the DHPT of the pool\",\"_dHedgePool\":\"dHEDGE pool contract address.\"}},\"reactivateCore(string)\":{\"params\":{\"_message\":\"Message reason for reactivation of the core.\"}},\"requireUpkeep()\":{\"returns\":{\"_0\":\"Address of the underlying/deposit token which needs to be deposited to the dHedge pool.\"}}},\"title\":\"Core contract for streaming into a dHedge pool.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calcUserUninvested(address,address)\":{\"notice\":\"Calculates uninvested token amount of a particular user.\"},\"checkCoreActive()\":{\"notice\":\"Checks if the core is active or not.\"},\"dHedgeDeposit(address)\":{\"notice\":\"Converts supertokens to underlying tokens and deposits them into dHedge pool.\"},\"deactivateCore(string)\":{\"notice\":\"Deactivates a dHedgeCore contract.\"},\"distribute(address)\":{\"notice\":\"Distributes the DHPTx corresponding to a underlying token's deposits.\"},\"emergencyCloseStream(address,address)\":{\"notice\":\"Closes a supertoken stream if core is jailed or user is running low on balance. Any user's stream can be closed by anyone provided the app is jailed- or user doesn't have enough amount to stream for more than 12 hours.\"},\"emergencyWithdraw(address)\":{\"notice\":\"Function to withdraw a token in case of emergency.\"},\"getTokenDistIndices(address)\":{\"notice\":\"Gets the distribution indices corresponding to an underlying token.\"},\"getUserDistIndex(address,address)\":{\"notice\":\"Gets a user's assigned permanent distribution index for a supertoken stream.\"},\"initStreamToken(address)\":{\"notice\":\"Initialises an underlying token and it's supertoken for streaming into dHEDGE pool.\"},\"reactivateCore(string)\":{\"notice\":\"Reactivates a dHedgeCore contract.\"},\"requireUpkeep()\":{\"notice\":\"Checks if deposit action can be performed.\"}},\"notice\":\"Contains user facing functions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dHedge-Factory-Version/dHedgeCore.sol\":\"dHedgeCore\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777Token standard as defined in the EIP.\\n *\\n * This contract uses the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\\n * token holders and recipients react to token movements by using setting implementers\\n * for the associated interfaces in said registry. See {IERC1820Registry} and\\n * {ERC1820Implementer}.\\n */\\ninterface IERC777 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     * means all token operations (creation, movement and destruction) must have\\n     * amounts that are a multiple of this number.\\n     *\\n     * For most token contracts, this value will equal 1.\\n     */\\n    function granularity() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * If send or receive hooks are registered for the caller and `recipient`,\\n     * the corresponding functions will be called with `data` and empty\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function send(\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See {operatorSend} and {operatorBurn}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external;\\n\\n    /**\\n     * @dev Revoke an account's operator status for the caller.\\n     *\\n     * See {isOperatorFor} and {defaultOperators}.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external;\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if {authorizeOperator} was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\\n     */\\n    function defaultOperators() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    event Sent(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bytes data,\\n        bytes operatorData\\n    );\\n\\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\\n\\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\\n\\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\\n\\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\\n}\\n\",\"keccak256\":\"0xc1e11e6758e8c83fc43e71e63dc1a211cace8a5912bbf06e697bc2148069800f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@superfluid-finance/ethereum-contracts/contracts/apps/SuperAppBase.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport {\\n    ISuperfluid,\\n    ISuperToken,\\n    ISuperApp,\\n    SuperAppDefinitions\\n} from \\\"../interfaces/superfluid/ISuperfluid.sol\\\";\\n\\nabstract contract SuperAppBase is ISuperApp {\\n\\n    function beforeAgreementCreated(\\n        ISuperToken /*superToken*/,\\n        address /*agreementClass*/,\\n        bytes32 /*agreementId*/,\\n        bytes calldata /*agreementData*/,\\n        bytes calldata /*ctx*/\\n    )\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bytes memory /*cbdata*/)\\n    {\\n        revert(\\\"Unsupported callback - Before Agreement Created\\\");\\n    }\\n\\n    function afterAgreementCreated(\\n        ISuperToken /*superToken*/,\\n        address /*agreementClass*/,\\n        bytes32 /*agreementId*/,\\n        bytes calldata /*agreementData*/,\\n        bytes calldata /*cbdata*/,\\n        bytes calldata /*ctx*/\\n    )\\n        external\\n        virtual\\n        override\\n        returns (bytes memory /*newCtx*/)\\n    {\\n        revert(\\\"Unsupported callback - After Agreement Created\\\");\\n    }\\n\\n    function beforeAgreementUpdated(\\n        ISuperToken /*superToken*/,\\n        address /*agreementClass*/,\\n        bytes32 /*agreementId*/,\\n        bytes calldata /*agreementData*/,\\n        bytes calldata /*ctx*/\\n    )\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bytes memory /*cbdata*/)\\n    {\\n        revert(\\\"Unsupported callback - Before Agreement updated\\\");\\n    }\\n\\n    function afterAgreementUpdated(\\n        ISuperToken /*superToken*/,\\n        address /*agreementClass*/,\\n        bytes32 /*agreementId*/,\\n        bytes calldata /*agreementData*/,\\n        bytes calldata /*cbdata*/,\\n        bytes calldata /*ctx*/\\n    )\\n        external\\n        virtual\\n        override\\n        returns (bytes memory /*newCtx*/)\\n    {\\n        revert(\\\"Unsupported callback - After Agreement Updated\\\");\\n    }\\n\\n    function beforeAgreementTerminated(\\n        ISuperToken /*superToken*/,\\n        address /*agreementClass*/,\\n        bytes32 /*agreementId*/,\\n        bytes calldata /*agreementData*/,\\n        bytes calldata /*ctx*/\\n    )\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bytes memory /*cbdata*/)\\n    {\\n        revert(\\\"Unsupported callback -  Before Agreement Terminated\\\");\\n    }\\n\\n    function afterAgreementTerminated(\\n        ISuperToken /*superToken*/,\\n        address /*agreementClass*/,\\n        bytes32 /*agreementId*/,\\n        bytes calldata /*agreementData*/,\\n        bytes calldata /*cbdata*/,\\n        bytes calldata /*ctx*/\\n    )\\n        external\\n        virtual\\n        override\\n        returns (bytes memory /*newCtx*/)\\n    {\\n        revert(\\\"Unsupported callback - After Agreement Terminated\\\");\\n    }\\n\\n}\\n\",\"keccak256\":\"0x76db1497b95aa8af5c6b6d64222c5894c6f5e5662844b7287f0134cbbd0bb5c5\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport { ISuperAgreement } from \\\"../superfluid/ISuperAgreement.sol\\\";\\nimport { ISuperfluidToken } from \\\"../superfluid/ISuperfluidToken.sol\\\";\\n\\n\\n/**\\n * @dev Superfluid's constant flow agreement interface\\n *\\n * @author Superfluid\\n */\\nabstract contract IConstantFlowAgreementV1 is ISuperAgreement {\\n\\n    /// @dev ISuperAgreement.agreementType implementation\\n    function agreementType() external override pure returns (bytes32) {\\n        return keccak256(\\\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1\\\");\\n    }\\n\\n    /**\\n     * @dev Get the maximum flow rate allowed with the deposit\\n     * @param deposit Deposit amount used for creating the flow\\n     */\\n    function getMaximumFlowRateFromDeposit(\\n        ISuperfluidToken token,\\n        uint256 deposit)\\n        external view virtual\\n        returns (int96 flowRate);\\n\\n    /**\\n     * @dev Get the deposit required for creating the flow\\n     * @param flowRate Flow rate to be tested\\n     */\\n    function getDepositRequiredForFlowRate(\\n        ISuperfluidToken token,\\n        int96 flowRate)\\n        external view virtual\\n        returns (uint256 deposit);\\n\\n    /**\\n     * @dev Create a flow betwen sender and receiver.\\n     * @param token Super token address.\\n     * @param receiver Flow receiver address.\\n     * @param flowRate New flow rate in amount per second.\\n     *\\n     * # App callbacks\\n     *\\n     * - AgreementCreated\\n     *   - agreementId - can be used in getFlowByID\\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\\n     *\\n     * NOTE:\\n     * - A deposit is taken as safety margin for the solvency agents.\\n     * - A extra gas fee may be taken to pay for solvency agent liquidations.\\n     */\\n    function createFlow(\\n        ISuperfluidToken token,\\n        address receiver,\\n        int96 flowRate,\\n        bytes calldata ctx\\n    )\\n        external virtual\\n        returns(bytes memory newCtx);\\n\\n    /**\\n     * @dev Update the flow rate between sender and receiver.\\n     * @param token Super token address.\\n     * @param receiver Flow receiver address.\\n     * @param flowRate New flow rate in amount per second.\\n     *\\n     * # App callbacks\\n     *\\n     * - AgreementUpdated\\n     *   - agreementId - can be used in getFlowByID\\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\\n     *\\n     * NOTE:\\n     * - Only the flow sender may update the flow rate.\\n     * - Even if the flow rate is zero, the flow is not deleted\\n     * from the system.\\n     * - Deposit amount will be adjusted accordingly.\\n     * - No new gas fee is charged.\\n     */\\n    function updateFlow(\\n        ISuperfluidToken token,\\n        address receiver,\\n        int96 flowRate,\\n        bytes calldata ctx\\n    )\\n        external virtual\\n        returns(bytes memory newCtx);\\n\\n\\n    /**\\n     * @dev Get the flow data between `sender` and `receiver`.\\n     * @param token Super token address.\\n     * @param sender Flow receiver.\\n     * @param receiver Flow sender.\\n     * @return timestamp Timestamp of when the flow is updated.\\n     * @return flowRate The flow rate.\\n     * @return deposit The amount of deposit the flow.\\n     * @return owedDeposit The amount of owed deposit of the flow.\\n     */\\n    function getFlow(\\n        ISuperfluidToken token,\\n        address sender,\\n        address receiver\\n    )\\n        external view virtual\\n        returns (\\n            uint256 timestamp,\\n            int96 flowRate,\\n            uint256 deposit,\\n            uint256 owedDeposit\\n        );\\n\\n    /**\\n     * @dev Get flow data using agreement ID\\n     * @param token Super token address.\\n     * @param agreementId The agreement ID.\\n     * @return timestamp Timestamp of when the flow is updated.\\n     * @return flowRate The flow rate.\\n     * @return deposit The amount of deposit the flow.\\n     * @return owedDeposit The amount of owed deposit of the flow.\\n     */\\n    function getFlowByID(\\n       ISuperfluidToken token,\\n       bytes32 agreementId\\n    )\\n        external view virtual\\n        returns (\\n            uint256 timestamp,\\n            int96 flowRate,\\n            uint256 deposit,\\n            uint256 owedDeposit\\n        );\\n\\n    /**\\n     * @dev Get the aggregated flow info of the account\\n     * @param token Super token address.\\n    * @param account Account for the query.\\n    */\\n    function getAccountFlowInfo(\\n        ISuperfluidToken token,\\n        address account\\n    )\\n        external view virtual\\n        returns (\\n            uint256 timestamp,\\n            int96 flowRate,\\n            uint256 deposit,\\n            uint256 owedDeposit);\\n\\n    /**\\n     * @dev Get the net flow rate of the account\\n     * @param token Super token address.\\n     * @param account Account for the query.\\n     * @return flowRate Flow rate.\\n     */\\n    function getNetFlow(\\n        ISuperfluidToken token,\\n        address account\\n    )\\n        external view virtual\\n        returns (int96 flowRate);\\n\\n    /**\\n     * @dev Delete the flow between sender and receiver\\n     * @param token Super token address.\\n     * @param ctx Context bytes.\\n     * @param receiver Flow receiver address.\\n     *\\n     * # App callbacks\\n     *\\n     * - AgreementTerminated\\n     *   - agreementId - can be used in getFlowByID\\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\\n     *\\n     * NOTE:\\n     * - Both flow sender and receiver may delete the flow.\\n     * - If Sender account is insolvent or in critical state, a solvency agent may\\n     *   also terminate the agreement.\\n     * - Gas fee may be returned to the sender.\\n     */\\n    function deleteFlow(\\n        ISuperfluidToken token,\\n        address sender,\\n        address receiver,\\n        bytes calldata ctx\\n    )\\n        external virtual\\n        returns(bytes memory newCtx);\\n\\n     /**\\n      * @dev Flow updated event.\\n      * @param token Super token address.\\n      * @param sender Flow sender address.\\n      * @param receiver Flow recipient address.\\n      * @param flowRate Flow rate in amount per second for this flow.\\n      * @param flowRate Total flow rate in amount per second for the sender.\\n      * @param flowRate Total flow rate in amount per second for the receiver.\\n      * @param userData The user provided data.\\n      */\\n     event FlowUpdated(\\n         ISuperfluidToken indexed token,\\n         address indexed sender,\\n         address indexed receiver,\\n         int96 flowRate,\\n         int256 totalSenderFlowRate,\\n         int256 totalReceiverFlowRate,\\n         bytes userData\\n     );\\n\\n}\\n\",\"keccak256\":\"0xc47783262893c4600d412987ea47558b3b79336407462e6dff2117c04304177f\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IInstantDistributionAgreementV1.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport { ISuperAgreement } from \\\"../superfluid/ISuperAgreement.sol\\\";\\nimport { ISuperfluidToken } from \\\"../superfluid/ISuperfluidToken.sol\\\";\\n\\n\\n/**\\n * @title Superfluid's instant distribution agreement interface.\\n *\\n * @author Superfluid\\n *\\n * Notes:\\n *   - A publisher can create as many as indeces as possibily identifiable with `indexId`.\\n *     - `indexId` is deliberately limited to 32 bits, to avoid the chance for sha-3 collision.\\n *       Despite knowing sha-3 collision is only theoratical.\\n *   - A publisher can create subscription to an index for any subscriber.\\n *   - A subscription consists of:\\n *     - The index it subscribes to.\\n *     - Number of units subscribed.\\n *   - An index consists of:\\n *     - Current value as `uint128 indexValue`.\\n *     - Total units of the approved subscriptions as `uint128 totalUnitsApproved`.\\n *     - Total units of the non approved subscription as `uint128 totalUnitsPending`.\\n *   - A publisher can update index with new value that doesn't decrease.\\n *   - A publisher can update subscription with any number of units.\\n *   - A publisher or a subscriber can delete subscription and reset units to zero.\\n *   - A subscriber must approve the index in order to receive distributions from the publisher\\n *     each time the index is updated.\\n *     - The amount distributed is $$\\\\Delta{index} * units$$\\n *   - Distributions to a non approved subscription stays in the publisher's deposit until:\\n *     - the subscriber approve the subscription (side effect),\\n *     - the publisher update the subscription (side effect),\\n *     - the subscriber delete the subscription even if it is never approved (side effect),\\n *     - or the subscriber can explicitly claim them.\\n */\\nabstract contract IInstantDistributionAgreementV1 is ISuperAgreement {\\n\\n    /// @dev ISuperAgreement.agreementType implementation\\n    function agreementType() external override pure returns (bytes32) {\\n        return keccak256(\\\"org.superfluid-finance.agreements.InstantDistributionAgreement.v1\\\");\\n    }\\n\\n    /**************************************************************************\\n     * Index operations\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Create a new index for the publisher.\\n     * @param token Super token address.\\n     * @param indexId Id of the index.\\n     *\\n     * # App callbacks\\n     *\\n     * None\\n     */\\n    function createIndex(\\n        ISuperfluidToken token,\\n        uint32 indexId,\\n        bytes calldata ctx)\\n            external\\n            virtual\\n            returns(bytes memory newCtx);\\n\\n    event IndexCreated(\\n        ISuperfluidToken indexed token,\\n        address indexed publisher,\\n        uint32 indexed indexId,\\n        bytes userData);\\n\\n    /**\\n     * @dev Query the data of a index.\\n     * @param token Super token address.\\n     * @param publisher The publisher of the index.\\n     * @param indexId Id of the index.\\n     * @return exist Does the index exist.\\n     * @return indexValue Value of the current index.\\n     * @return totalUnitsApproved Total units approved for the index.\\n     * @return totalUnitsPending Total units pending approval for the index.\\n     */\\n    function getIndex(\\n        ISuperfluidToken token,\\n        address publisher,\\n        uint32 indexId)\\n            external\\n            view\\n            virtual\\n            returns(\\n                bool exist,\\n                uint128 indexValue,\\n                uint128 totalUnitsApproved,\\n                uint128 totalUnitsPending);\\n\\n    /**\\n     * @dev Calculate actual distribution amount\\n     * @param token Super token address.\\n     * @param publisher The publisher of the index.\\n     * @param indexId Id of the index.\\n     * @param amount The amount of tokens desired to be distributed.\\n     */\\n    function calculateDistribution(\\n       ISuperfluidToken token,\\n       address publisher,\\n       uint32 indexId,\\n       uint256 amount)\\n           external view\\n           virtual\\n           returns(\\n               uint256 actualAmount,\\n               uint128 newIndexValue);\\n\\n    /**\\n     * @dev Update index value of an index.\\n     * @param token Super token address.\\n     * @param indexId Id of the index.\\n     * @param indexValue Value of the index.\\n     *\\n     * # App callbacks\\n     *\\n     * None\\n     */\\n    function updateIndex(\\n        ISuperfluidToken token,\\n        uint32 indexId,\\n        uint128 indexValue,\\n        bytes calldata ctx)\\n            external\\n            virtual\\n            returns(bytes memory newCtx);\\n\\n    event IndexUpdated(\\n        ISuperfluidToken indexed token,\\n        address indexed publisher,\\n        uint32 indexed indexId,\\n        uint128 oldIndexValue,\\n        uint128 newIndexValue,\\n        uint128 totalUnitsPending,\\n        uint128 totalUnitsApproved,\\n        bytes userData);\\n\\n    /**\\n     * @dev Distribute tokens through the index.\\n     * @param token Super token address.\\n     * @param indexId Id of the index.\\n     * @param amount The amount of tokens desired to be distributed.\\n     *\\n     * NOTE:\\n     * - This is a convenient version of updateIndex. It adds to the index\\n     *   a delta that equals to `amount / totalUnits`.\\n     * - The actual amount distributed could be obtained via\\n     *   `calculateDistribution`. This is due to precision error with index\\n     *   value and units data range.\\n     *\\n     * # App callbacks\\n     *\\n     * None\\n     */\\n    function distribute(\\n        ISuperfluidToken token,\\n        uint32 indexId,\\n        uint256 amount,\\n        bytes calldata ctx)\\n            external\\n            virtual\\n            returns(bytes memory newCtx);\\n\\n\\n    /**************************************************************************\\n     * Subscription operations\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Approve the subscription of an index.\\n     * @param token Super token address.\\n     * @param publisher The publisher of the index.\\n     * @param indexId Id of the index.\\n     *\\n     * # App callbacks\\n     *\\n     * - if subscription exist\\n     *   - AgreementCreated callback to the publisher:\\n     *      - agreementId is for the subscription\\n     * - if subscription does not exist\\n     *   - AgreementUpdated callback to the publisher:\\n     *      - agreementId is for the subscription\\n     */\\n    function approveSubscription(\\n        ISuperfluidToken token,\\n        address publisher,\\n        uint32 indexId,\\n        bytes calldata ctx)\\n            external\\n            virtual\\n            returns(bytes memory newCtx);\\n\\n    event IndexSubscribed(\\n        ISuperfluidToken indexed token,\\n        address indexed publisher,\\n        uint32 indexed indexId,\\n        address subscriber,\\n        bytes userData);\\n\\n    event SubscriptionApproved(\\n        ISuperfluidToken indexed token,\\n        address indexed subscriber,\\n        address publisher,\\n        uint32 indexId,\\n        bytes userData);\\n\\n    /**\\n    * @dev Revoke the subscription of an index.\\n    * @param token Super token address.\\n    * @param publisher The publisher of the index.\\n    * @param indexId Id of the index.\\n    *\\n    * # App callbacks\\n    * - AgreementUpdated callback to the publisher:\\n    *    - agreementId is for the subscription\\n    */\\n    function revokeSubscription(\\n        ISuperfluidToken token,\\n        address publisher,\\n        uint32 indexId,\\n        bytes calldata ctx)\\n         external\\n         virtual\\n         returns(bytes memory newCtx);\\n\\n    event IndexUnsubscribed(\\n        ISuperfluidToken indexed token,\\n        address indexed publisher,\\n        uint32 indexed indexId,\\n        address subscriber,\\n        bytes userData);\\n\\n    event SubscriptionRevoked(\\n        ISuperfluidToken indexed token,\\n        address indexed subscriber,\\n        address publisher,\\n        uint32 indexId,\\n        bytes userData);\\n\\n    /**\\n     * @dev Update the nuber of units of a subscription.\\n     * @param token Super token address.\\n     * @param indexId Id of the index.\\n     * @param subscriber The subscriber of the index.\\n     * @param units Number of units of the subscription.\\n     *\\n     * # App callbacks\\n     *\\n     * - if subscription exist\\n     *   - AgreementCreated callback to the subscriber:\\n     *      - agreementId is for the subscription\\n     * - if subscription does not exist\\n     *   - AgreementUpdated callback to the subscriber:\\n     *      - agreementId is for the subscription\\n     */\\n    function updateSubscription(\\n        ISuperfluidToken token,\\n        uint32 indexId,\\n        address subscriber,\\n        uint128 units,\\n        bytes calldata ctx)\\n            external\\n            virtual\\n            returns(bytes memory newCtx);\\n\\n    event IndexUnitsUpdated(\\n        ISuperfluidToken indexed token,\\n        address indexed publisher,\\n        uint32 indexed indexId,\\n        address subscriber,\\n        uint128 units,\\n        bytes userData);\\n\\n    event SubscriptionUnitsUpdated(\\n        ISuperfluidToken indexed token,\\n        address indexed subscriber,\\n        address publisher,\\n        uint32 indexId,\\n        uint128 units,\\n        bytes userData);\\n\\n    /**\\n     * @dev Get data of a subscription\\n     * @param token Super token address.\\n     * @param publisher The publisher of the index.\\n     * @param indexId Id of the index.\\n     * @param subscriber The subscriber of the index.\\n     * @return exist Does the subscription exist?\\n     * @return approved Is the subscription approved?\\n     * @return units Units of the suscription.\\n     * @return pendingDistribution Pending amount of tokens to be distributed for unapproved subscription.\\n     */\\n    function getSubscription(\\n        ISuperfluidToken token,\\n        address publisher,\\n        uint32 indexId,\\n        address subscriber)\\n            external\\n            view\\n            virtual\\n            returns(\\n                bool exist,\\n                bool approved,\\n                uint128 units,\\n                uint256 pendingDistribution\\n            );\\n\\n    /**\\n     * @dev Get data of a subscription by agreement ID\\n     * @param token Super token address.\\n     * @param agreementId The agreement ID.\\n     * @return publisher The publisher of the index.\\n     * @return indexId Id of the index.\\n     * @return approved Is the subscription approved?\\n     * @return units Units of the suscription.\\n     * @return pendingDistribution Pending amount of tokens to be distributed for unapproved subscription.\\n     */\\n    function getSubscriptionByID(\\n        ISuperfluidToken token,\\n        bytes32 agreementId)\\n            external\\n            view\\n            virtual\\n            returns(\\n                address publisher,\\n                uint32 indexId,\\n                bool approved,\\n                uint128 units,\\n                uint256 pendingDistribution\\n            );\\n\\n    /**\\n     * @dev List subscriptions of an user.\\n     * @param token Super token address.\\n     * @param subscriber The user, a subscriber.\\n     * @return publishers Publishers of the subcriptions.\\n     * @return indexIds Indexes of the subscriptions.\\n     * @return unitsList Units of the subscriptions.\\n     */\\n    function listSubscriptions(\\n        ISuperfluidToken token,\\n        address subscriber)\\n            external\\n            view\\n            virtual\\n            returns(\\n                address[] memory publishers,\\n                uint32[] memory indexIds,\\n                uint128[] memory unitsList);\\n\\n    /**\\n     * @dev Delete the subscription of an user.\\n     * @param token Super token address.\\n     * @param publisher The publisher of the index.\\n     * @param indexId Id of the index.\\n     * @param subscriber The user, a subscriber.\\n     *\\n     * # App callbacks\\n     *\\n     * - if the subscriber called it\\n     *   - AgreementTerminated callback to the publsiher:\\n     *      - agreementId is for the subscription\\n     * - if the publisher called it\\n     *   - AgreementTerminated callback to the subscriber:\\n     *      - agreementId is for the subscription\\n     */\\n    function deleteSubscription(\\n        ISuperfluidToken token,\\n        address publisher,\\n        uint32 indexId,\\n        address subscriber,\\n        bytes calldata ctx)\\n            external\\n            virtual\\n            returns(bytes memory newCtx);\\n\\n    /**\\n    * @dev Claim pending distributions.\\n    * @param token Super token address.\\n    * @param publisher The publisher of the index.\\n    * @param indexId Id of the index.\\n    * @param subscriber The user, a subscriber.\\n    *\\n    * The subscription should not exist yet.\\n    *\\n    * # App callbacks\\n    *\\n    * - AgreementUpdated callback to the publisher:\\n    *    - agreementId is for the subscription\\n    */\\n    function claim(\\n        ISuperfluidToken token,\\n        address publisher,\\n        uint32 indexId,\\n        address subscriber,\\n        bytes calldata ctx)\\n        external\\n        virtual\\n        returns(bytes memory newCtx);\\n\\n    event IndexDistributionClaimed(\\n        ISuperfluidToken indexed token,\\n        address indexed publisher,\\n        uint32 indexed indexId,\\n        address subscriber,\\n        uint256 amount);\\n\\n    event SubscriptionDistributionClaimed(\\n        ISuperfluidToken indexed token,\\n        address indexed subscriber,\\n        address publisher,\\n        uint32 indexId,\\n        uint256 amount);\\n\\n}\\n\",\"keccak256\":\"0x7a03c59f7f7f228cfaa9e3e19b9766cfa87f05f8702501bd7fa6a6bd39454608\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\n/**\\n * @dev Super app definitions library\\n */\\nlibrary SuperAppDefinitions {\\n\\n    /**************************************************************************\\n    / App manifest config word\\n    /**************************************************************************/\\n\\n    /*\\n     * App level is a way to allow the app to whitelist what other app it can\\n     * interact with (aka. composite app feature).\\n     *\\n     * For more details, refer to the technical paper of superfluid protocol.\\n     */\\n    uint256 constant internal APP_LEVEL_MASK = 0xFF;\\n\\n    // The app is at the final level, hence it doesn't want to interact with any other app\\n    uint256 constant internal APP_LEVEL_FINAL = 1 << 0;\\n\\n    // The app is at the second level, it may interact with other final level apps if whitelisted\\n    uint256 constant internal APP_LEVEL_SECOND = 1 << 1;\\n\\n    function getAppLevel(uint256 configWord) internal pure returns (uint8) {\\n        return uint8(configWord & APP_LEVEL_MASK);\\n    }\\n\\n    uint256 constant internal APP_JAIL_BIT = 1 << 15;\\n    function isAppJailed(uint256 configWord) internal pure returns (bool) {\\n        return (configWord & SuperAppDefinitions.APP_JAIL_BIT) > 0;\\n    }\\n\\n    /**************************************************************************\\n    / Callback implementation bit masks\\n    /**************************************************************************/\\n    uint256 constant internal AGREEMENT_CALLBACK_NOOP_BITMASKS = 0xFF << 32;\\n    uint256 constant internal BEFORE_AGREEMENT_CREATED_NOOP = 1 << (32 + 0);\\n    uint256 constant internal AFTER_AGREEMENT_CREATED_NOOP = 1 << (32 + 1);\\n    uint256 constant internal BEFORE_AGREEMENT_UPDATED_NOOP = 1 << (32 + 2);\\n    uint256 constant internal AFTER_AGREEMENT_UPDATED_NOOP = 1 << (32 + 3);\\n    uint256 constant internal BEFORE_AGREEMENT_TERMINATED_NOOP = 1 << (32 + 4);\\n    uint256 constant internal AFTER_AGREEMENT_TERMINATED_NOOP = 1 << (32 + 5);\\n\\n    /**************************************************************************\\n    / App Jail Reasons\\n    /**************************************************************************/\\n\\n    uint256 constant internal APP_RULE_REGISTRATION_ONLY_IN_CONSTRUCTOR = 1;\\n    uint256 constant internal APP_RULE_NO_REGISTRATION_FOR_EOA = 2;\\n    uint256 constant internal APP_RULE_NO_REVERT_ON_TERMINATION_CALLBACK = 10;\\n    uint256 constant internal APP_RULE_NO_CRITICAL_SENDER_ACCOUNT = 11;\\n    uint256 constant internal APP_RULE_NO_CRITICAL_RECEIVER_ACCOUNT = 12;\\n    uint256 constant internal APP_RULE_CTX_IS_READONLY = 20;\\n    uint256 constant internal APP_RULE_CTX_IS_NOT_CLEAN = 21;\\n    uint256 constant internal APP_RULE_CTX_IS_MALFORMATED = 22;\\n    uint256 constant internal APP_RULE_COMPOSITE_APP_IS_NOT_WHITELISTED = 30;\\n    uint256 constant internal APP_RULE_COMPOSITE_APP_IS_JAILED = 31;\\n    uint256 constant internal APP_RULE_MAX_APP_LEVEL_REACHED = 40;\\n}\\n\\n/**\\n * @dev Context definitions library\\n */\\nlibrary ContextDefinitions {\\n\\n    /**************************************************************************\\n    / Call info\\n    /**************************************************************************/\\n\\n    // app level\\n    uint256 constant internal CALL_INFO_APP_LEVEL_MASK = 0xFF;\\n\\n    // call type\\n    uint256 constant internal CALL_INFO_CALL_TYPE_SHIFT = 32;\\n    uint256 constant internal CALL_INFO_CALL_TYPE_MASK = 0xF << CALL_INFO_CALL_TYPE_SHIFT;\\n    uint8 constant internal CALL_INFO_CALL_TYPE_AGREEMENT = 1;\\n    uint8 constant internal CALL_INFO_CALL_TYPE_APP_ACTION = 2;\\n    uint8 constant internal CALL_INFO_CALL_TYPE_APP_CALLBACK = 3;\\n\\n    function decodeCallInfo(uint256 callInfo)\\n        internal pure\\n        returns (uint8 appLevel, uint8 callType)\\n    {\\n        appLevel = uint8(callInfo & CALL_INFO_APP_LEVEL_MASK);\\n        callType = uint8((callInfo & CALL_INFO_CALL_TYPE_MASK) >> CALL_INFO_CALL_TYPE_SHIFT);\\n    }\\n\\n    function encodeCallInfo(uint8 appLevel, uint8 callType)\\n        internal pure\\n        returns (uint256 callInfo)\\n    {\\n        return uint256(appLevel) | (uint256(callType) << CALL_INFO_CALL_TYPE_SHIFT);\\n    }\\n\\n}\\n\\n/**\\n * @dev Batch operation library\\n */\\nlibrary BatchOperation {\\n    /**\\n     * @dev ERC20.approve batch operation type\\n     *\\n     * Call spec:\\n     * ISuperToken(target).operationApprove(\\n     *     abi.decode(data, (address spender, uint256 amount))\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_ERC20_APPROVE = 1;\\n    /**\\n     * @dev ERC20.transferFrom batch operation type\\n     *\\n     * Call spec:\\n     * ISuperToken(target).operationTransferFrom(\\n     *     abi.decode(data, (address sender, address recipient, uint256 amount)\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_ERC20_TRANSFER_FROM = 2;\\n    /**\\n     * @dev SuperToken.upgrade batch operation type\\n     *\\n     * Call spec:\\n     * ISuperToken(target).operationUpgrade(\\n     *     abi.decode(data, (uint256 amount)\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_SUPERTOKEN_UPGRADE = 1 + 100;\\n    /**\\n     * @dev SuperToken.downgrade batch operation type\\n     *\\n     * Call spec:\\n     * ISuperToken(target).operationDowngrade(\\n     *     abi.decode(data, (uint256 amount)\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_SUPERTOKEN_DOWNGRADE = 2 + 100;\\n    /**\\n     * @dev Superfluid.callAgreement batch operation type\\n     *\\n     * Call spec:\\n     * callAgreement(\\n     *     ISuperAgreement(target)),\\n     *     abi.decode(data, (bytes calldata, bytes userdata)\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_SUPERFLUID_CALL_AGREEMENT = 1 + 200;\\n    /**\\n     * @dev Superfluid.callAppAction batch operation type\\n     *\\n     * Call spec:\\n     * callAppAction(\\n     *     ISuperApp(target)),\\n     *     data\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_SUPERFLUID_CALL_APP_ACTION = 2 + 200;\\n}\\n\\nlibrary SuperfluidGovernanceConfigs {\\n\\n    bytes32 constant internal SUPERFLUID_REWARD_ADDRESS_CONFIG_KEY =\\n        keccak256(\\\"org.superfluid-finance.superfluid.rewardAddress\\\");\\n\\n    bytes32 constant internal CFAv1_LIQUIDATION_PERIOD_CONFIG_KEY =\\n        keccak256(\\\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1.liquidationPeriod\\\");\\n\\n    function getTrustedForwarderConfigKey(address forwarder) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            \\\"org.superfluid-finance.superfluid.trustedForwarder\\\",\\n            forwarder));\\n    }\\n\\n    function getAppRegistrationConfigKey(address deployer, string memory registrationKey) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            \\\"org.superfluid-finance.superfluid.appWhiteListing.registrationKey\\\",\\n            deployer,\\n            registrationKey));\\n    }\\n\\n    function getAppFactoryConfigKey(address factory) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            \\\"org.superfluid-finance.superfluid.appWhiteListing.factory\\\",\\n            factory));\\n    }\\n}\\n\",\"keccak256\":\"0x430cf617b2acfd3b5ee9b245b708faf9ded9a2b3168d61098db1016af14533ec\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport { ISuperfluidToken } from \\\"./ISuperfluidToken.sol\\\";\\n\\n/**\\n * @title Superfluid's agreement interface.\\n *\\n * @author Superfluid\\n */\\ninterface ISuperAgreement {\\n\\n    /**\\n     * @dev Initialize the agreement contract\\n     */\\n    function initialize() external;\\n\\n    /**\\n     * @dev Get the type of the agreement class.\\n     */\\n    function agreementType() external view returns (bytes32);\\n\\n    /**\\n     * @dev Calculate the real-time balance for the account of this agreement class.\\n     * @param account Account the state belongs to\\n     * @param time Future time used for the calculation.\\n     * @return dynamicBalance Dynamic balance portion of real-time balance of this agreement.\\n     * @return deposit Account deposit amount of this agreement.\\n     * @return owedDeposit Account owed deposit amount of this agreement.\\n     */\\n    function realtimeBalanceOf(\\n        ISuperfluidToken token,\\n        address account,\\n        uint256 time\\n    )\\n        external\\n        view\\n        returns (\\n            int256 dynamicBalance,\\n            uint256 deposit,\\n            uint256 owedDeposit\\n        );\\n\\n}\\n\",\"keccak256\":\"0xcf8a33fadd5db47562156a11098623246efd1b46a2c3d28269767bcbb324fd66\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport { ISuperToken } from \\\"./ISuperToken.sol\\\";\\n\\n\\n/**\\n * @title Superfluid's app interface.\\n *\\n * NOTE:\\n * - Be fearful of the app jail, when the word permitted is used.\\n *\\n * @author Superfluid\\n */\\ninterface ISuperApp {\\n\\n    /**\\n     * @dev Callback before a new agreement is created.\\n     * @param superToken The super token used for the agreement.\\n     * @param agreementClass The agreement class address.\\n     * @param agreementId The agreementId\\n     * @param agreementData The agreement data (non-compressed)\\n     * @param ctx The context data.\\n     * @return cbdata A free format in memory data the app can use to pass\\n     *          arbitary information to the after-hook callback.\\n     *\\n     * NOTE:\\n     * - It will be invoked with `staticcall`, no state changes are permitted.\\n     * - Only revert with a \\\"reason\\\" is permitted.\\n     */\\n    function beforeAgreementCreated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata ctx\\n    )\\n        external\\n        view\\n        returns (bytes memory cbdata);\\n\\n    /**\\n     * @dev Callback after a new agreement is created.\\n     * @param superToken The super token used for the agreement.\\n     * @param agreementClass The agreement class address.\\n     * @param agreementId The agreementId\\n     * @param agreementData The agreement data (non-compressed)\\n     * @param cbdata The data returned from the before-hook callback.\\n     * @param ctx The context data.\\n     * @return newCtx The current context of the transaction.\\n     *\\n     * NOTE:\\n     * - State changes is permitted.\\n     * - Only revert with a \\\"reason\\\" is permitted.\\n     */\\n    function afterAgreementCreated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata cbdata,\\n        bytes calldata ctx\\n    )\\n        external\\n        returns (bytes memory newCtx);\\n\\n    /**\\n     * @dev Callback before a new agreement is updated.\\n     * @param superToken The super token used for the agreement.\\n     * @param agreementClass The agreement class address.\\n     * @param agreementId The agreementId\\n     * @param agreementData The agreement data (non-compressed)\\n     * @param ctx The context data.\\n     * @return cbdata A free format in memory data the app can use to pass\\n     *          arbitary information to the after-hook callback.\\n     *\\n     * NOTE:\\n     * - It will be invoked with `staticcall`, no state changes are permitted.\\n     * - Only revert with a \\\"reason\\\" is permitted.\\n     */\\n    function beforeAgreementUpdated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata ctx\\n    )\\n        external\\n        view\\n        returns (bytes memory cbdata);\\n\\n\\n    /**\\n    * @dev Callback after a new agreement is updated.\\n    * @param superToken The super token used for the agreement.\\n    * @param agreementClass The agreement class address.\\n    * @param agreementId The agreementId\\n    * @param agreementData The agreement data (non-compressed)\\n    * @param cbdata The data returned from the before-hook callback.\\n    * @param ctx The context data.\\n    * @return newCtx The current context of the transaction.\\n    *\\n    * NOTE:\\n    * - State changes is permitted.\\n    * - Only revert with a \\\"reason\\\" is permitted.\\n    */\\n    function afterAgreementUpdated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata cbdata,\\n        bytes calldata ctx\\n    )\\n        external\\n        returns (bytes memory newCtx);\\n\\n    /**\\n    * @dev Callback before a new agreement is terminated.\\n    * @param superToken The super token used for the agreement.\\n    * @param agreementClass The agreement class address.\\n    * @param agreementId The agreementId\\n    * @param agreementData The agreement data (non-compressed)\\n    * @param ctx The context data.\\n    * @return cbdata A free format in memory data the app can use to pass\\n    *          arbitary information to the after-hook callback.\\n    *\\n    * NOTE:\\n    * - It will be invoked with `staticcall`, no state changes are permitted.\\n    * - Revert is not permitted.\\n    */\\n    function beforeAgreementTerminated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata ctx\\n    )\\n        external\\n        view\\n        returns (bytes memory cbdata);\\n\\n    /**\\n    * @dev Callback after a new agreement is terminated.\\n    * @param superToken The super token used for the agreement.\\n    * @param agreementClass The agreement class address.\\n    * @param agreementId The agreementId\\n    * @param agreementData The agreement data (non-compressed)\\n    * @param cbdata The data returned from the before-hook callback.\\n    * @param ctx The context data.\\n    * @return newCtx The current context of the transaction.\\n    *\\n    * NOTE:\\n    * - State changes is permitted.\\n    * - Revert is not permitted.\\n    */\\n    function afterAgreementTerminated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata cbdata,\\n        bytes calldata ctx\\n    )\\n        external\\n        returns (bytes memory newCtx);\\n}\\n\",\"keccak256\":\"0xca93702505ec3c8244227e372687d9bdbc9d368fa07723d310ab9550501abb2a\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport { ISuperfluid } from \\\"./ISuperfluid.sol\\\";\\nimport { ISuperfluidToken } from \\\"./ISuperfluidToken.sol\\\";\\nimport { TokenInfo } from \\\"../tokens/TokenInfo.sol\\\";\\nimport { IERC777 } from \\\"@openzeppelin/contracts/token/ERC777/IERC777.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Superfluid's super token (Superfluid Token + ERC20 + ERC777) interface\\n *\\n * @author Superfluid\\n */\\ninterface ISuperToken is ISuperfluidToken, TokenInfo, IERC20, IERC777 {\\n\\n    /// @dev Initialize the contract\\n    function initialize(\\n        IERC20 underlyingToken,\\n        uint8 underlyingDecimals,\\n        string calldata n,\\n        string calldata s\\n    ) external;\\n\\n    /**************************************************************************\\n    * TokenInfo & ERC777\\n    *************************************************************************/\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view override(IERC777, TokenInfo) returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view override(IERC777, TokenInfo) returns (string memory);\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: SuperToken always uses 18 decimals.\\n     *\\n     * Note: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view override(TokenInfo) returns (uint8);\\n\\n    /**************************************************************************\\n    * ERC20 & ERC777\\n    *************************************************************************/\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() external view override(IERC777, IERC20) returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address account) external view override(IERC777, IERC20) returns(uint256 balance);\\n\\n    /**************************************************************************\\n    * ERC20\\n    *************************************************************************/\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external override(IERC20) returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external override(IERC20) view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external override(IERC20) returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external override(IERC20) returns (bool);\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n     function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n    /**************************************************************************\\n    * ERC777\\n    *************************************************************************/\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     * means all token operations (creation, movement and destruction) must have\\n     * amounts that are a multiple of this number.\\n     *\\n     * For super token contracts, this value is 1 always\\n     */\\n    function granularity() external view override(IERC777) returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * If send or receive hooks are registered for the caller and `recipient`,\\n     * the corresponding functions will be called with `data` and empty\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function send(address recipient, uint256 amount, bytes calldata data) external override(IERC777);\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external override(IERC777);\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See {operatorSend} and {operatorBurn}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external override(IERC777) view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external override(IERC777);\\n\\n    /**\\n     * @dev Revoke an account's operator status for the caller.\\n     *\\n     * See {isOperatorFor} and {defaultOperators}.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external override(IERC777);\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if {authorizeOperator} was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\\n     */\\n    function defaultOperators() external override(IERC777) view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external override(IERC777);\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external override(IERC777);\\n\\n    /**************************************************************************\\n     * SuperToken custom token functions\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Mint new tokens for the account\\n     *\\n     * Modifiers:\\n     *  - onlySelf\\n     */\\n    function selfMint(\\n        address account,\\n        uint256 amount,\\n        bytes memory userData\\n    ) external;\\n\\n   /**\\n    * @dev Burn existing tokens for the account\\n    *\\n    * Modifiers:\\n    *  - onlySelf\\n    */\\n   function selfBurn(\\n       address account,\\n       uint256 amount,\\n       bytes memory userData\\n   ) external;\\n\\n    /**************************************************************************\\n     * SuperToken extra functions\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Transfer all available balance from `msg.sender` to `recipient`\\n     */\\n    function transferAll(address recipient) external;\\n\\n    /**************************************************************************\\n     * ERC20 wrapping\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Return the underlying token contract\\n     * @return tokenAddr Underlying token address\\n     */\\n    function getUnderlyingToken() external view returns(address tokenAddr);\\n\\n    /**\\n     * @dev Upgrade ERC20 to SuperToken.\\n     * @param amount Number of tokens to be upgraded (in 18 decimals)\\n     *\\n     * NOTE: It will use \\u00b4transferFrom\\u00b4 to get tokens. Before calling this\\n     * function you should \\u00b4approve\\u00b4 this contract\\n     */\\n    function upgrade(uint256 amount) external;\\n\\n    /**\\n     * @dev Upgrade ERC20 to SuperToken and transfer immediately\\n     * @param to The account to received upgraded tokens\\n     * @param amount Number of tokens to be upgraded (in 18 decimals)\\n     * @param data User data for the TokensRecipient callback\\n     *\\n     * NOTE: It will use \\u00b4transferFrom\\u00b4 to get tokens. Before calling this\\n     * function you should \\u00b4approve\\u00b4 this contract\\n     */\\n    function upgradeTo(address to, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Token upgrade event\\n     * @param account Account where tokens are upgraded to\\n     * @param amount Amount of tokens upgraded (in 18 decimals)\\n     */\\n    event TokenUpgraded(\\n        address indexed account,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Downgrade SuperToken to ERC20.\\n     * @dev It will call transfer to send tokens\\n     * @param amount Number of tokens to be downgraded\\n     */\\n    function downgrade(uint256 amount) external;\\n\\n    /**\\n     * @dev Token downgrade event\\n     * @param account Account whose tokens are upgraded\\n     * @param amount Amount of tokens downgraded\\n     */\\n    event TokenDowngraded(\\n        address indexed account,\\n        uint256 amount\\n    );\\n\\n    /**************************************************************************\\n    * Batch Operations\\n    *************************************************************************/\\n\\n    /**\\n    * @dev Perform ERC20 approve by host contract.\\n    * @param account The account owner to be approved.\\n    * @param spender The spender of account owner's funds.\\n    * @param amount Number of tokens to be approved.\\n    *\\n    * Modifiers:\\n    *  - onlyHost\\n    */\\n    function operationApprove(\\n        address account,\\n        address spender,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n    * @dev Perform ERC20 transfer from by host contract.\\n    * @param account The account to spend sender's funds.\\n    * @param spender  The account where the funds is sent from.\\n    * @param recipient The recipient of thefunds.\\n    * @param amount Number of tokens to be transferred.\\n    *\\n    * Modifiers:\\n    *  - onlyHost\\n    */\\n    function operationTransferFrom(\\n        address account,\\n        address spender,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n    * @dev Upgrade ERC20 to SuperToken by host contract.\\n    * @param account The account to be changed.\\n    * @param amount Number of tokens to be upgraded (in 18 decimals)\\n    *\\n    * Modifiers:\\n    *  - onlyHost\\n    */\\n    function operationUpgrade(address account, uint256 amount) external;\\n\\n    /**\\n    * @dev Downgrade ERC20 to SuperToken by host contract.\\n    * @param account The account to be changed.\\n    * @param amount Number of tokens to be downgraded (in 18 decimals)\\n    *\\n    * Modifiers:\\n    *  - onlyHost\\n    */\\n    function operationDowngrade(address account, uint256 amount) external;\\n\\n\\n    /**************************************************************************\\n    * Function modifiers for access control and parameter validations\\n    *\\n    * While they cannot be explicitly stated in function definitions, they are\\n    * listed in function definition comments instead for clarity.\\n    *\\n    * NOTE: solidity-coverage not supporting it\\n    *************************************************************************/\\n\\n    /// @dev The msg.sender must be the contract itself\\n    //modifier onlySelf() virtual\\n\\n}\\n\",\"keccak256\":\"0xba355f7d7d5d32ca345bcdb355759ba598a911ff07227ff80012a5e0bf660fb1\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport { ISuperToken } from \\\"./ISuperToken.sol\\\";\\n\\nimport {\\n    IERC20,\\n    ERC20WithTokenInfo\\n} from \\\"../tokens/ERC20WithTokenInfo.sol\\\";\\n\\n\\ninterface ISuperTokenFactory {\\n\\n    /**\\n     * @dev Get superfluid host contract address\\n     */\\n    function getHost() external view returns(address host);\\n\\n    /// @dev Initialize the contract\\n    function initialize() external;\\n\\n    /**\\n     * @dev Get the current super token logic used by the factory\\n     */\\n    function getSuperTokenLogic() external view returns (ISuperToken superToken);\\n\\n    /**\\n     * @dev Upgradability modes\\n     */\\n    enum Upgradability {\\n        /// Non upgradable super token, `host.updateSuperTokenLogic` will revert\\n        NON_UPGRADABLE,\\n        /// Upgradable through `host.updateSuperTokenLogic` operation\\n        SEMI_UPGRADABLE,\\n        /// Always using the latest super token logic\\n        FULL_UPGRADABE\\n    }\\n\\n    /**\\n     * @dev Create new super token wrapper for the underlying ERC20 token\\n     * @param underlyingToken Underlying ERC20 token\\n     * @param underlyingDecimals Underlying token decimals\\n     * @param upgradability Upgradability mode\\n     * @param name Super token name\\n     * @param symbol Super token symbol\\n     */\\n    function createERC20Wrapper(\\n        IERC20 underlyingToken,\\n        uint8 underlyingDecimals,\\n        Upgradability upgradability,\\n        string calldata name,\\n        string calldata symbol\\n    )\\n        external\\n        returns (ISuperToken superToken);\\n\\n    /**\\n     * @dev Create new super token wrapper for the underlying ERC20 token with extra token info\\n     * @param underlyingToken Underlying ERC20 token\\n     * @param upgradability Upgradability mode\\n     * @param name Super token name\\n     * @param symbol Super token symbol\\n     *\\n     * NOTE:\\n     * - It assumes token provide the .decimals() function\\n     */\\n    function createERC20Wrapper(\\n        ERC20WithTokenInfo underlyingToken,\\n        Upgradability upgradability,\\n        string calldata name,\\n        string calldata symbol\\n    )\\n        external\\n        returns (ISuperToken superToken);\\n\\n    function initializeCustomSuperToken(\\n        address customSuperTokenProxy\\n    )\\n        external;\\n\\n    event SuperTokenLogicCreated(ISuperToken indexed tokenLogic);\\n\\n    event SuperTokenCreated(ISuperToken indexed token);\\n\\n    event CustomSuperTokenCreated(ISuperToken indexed token);\\n\\n}\\n\",\"keccak256\":\"0x7dc514c6c9eda681ed8ad66ccfb68dc22764b6c429ab55fddbba28b6b148621b\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n// This is required by the batchCall and decodeCtx\\npragma experimental ABIEncoderV2;\\n\\nimport { ISuperfluidGovernance } from \\\"./ISuperfluidGovernance.sol\\\";\\nimport { ISuperfluidToken } from \\\"./ISuperfluidToken.sol\\\";\\nimport { ISuperToken } from \\\"./ISuperToken.sol\\\";\\nimport { ISuperTokenFactory } from \\\"./ISuperTokenFactory.sol\\\";\\nimport { ISuperAgreement } from \\\"./ISuperAgreement.sol\\\";\\nimport { ISuperApp } from \\\"./ISuperApp.sol\\\";\\nimport {\\n    SuperAppDefinitions,\\n    ContextDefinitions,\\n    BatchOperation,\\n    SuperfluidGovernanceConfigs\\n} from \\\"./Definitions.sol\\\";\\nimport { TokenInfo } from \\\"../tokens/TokenInfo.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IERC777 } from \\\"@openzeppelin/contracts/token/ERC777/IERC777.sol\\\";\\n\\n\\n/**\\n * @dev Superfluid host interface.\\n\\n * It is the central contract of the system where super agreement, super app\\n * and super token features are connected together.\\n *\\n * The superfluid host contract is also the entry point for the protocol users,\\n * where batch call and meta transaction are provided for UX improvements.\\n *\\n * @author Superfluid\\n */\\ninterface ISuperfluid {\\n\\n    /**************************************************************************\\n     * Governance\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Get the current governace of the Superfluid host\\n     */\\n    function getGovernance() external view returns(ISuperfluidGovernance governance);\\n\\n    event GovernanceReplaced(ISuperfluidGovernance oldGov, ISuperfluidGovernance newGov);\\n    /**\\n     * @dev Replace the current governance with a new one\\n     */\\n    function replaceGovernance(ISuperfluidGovernance newGov) external;\\n\\n    /**************************************************************************\\n     * Agreement Whitelisting\\n     *************************************************************************/\\n\\n    event AgreementClassRegistered(bytes32 agreementType, address code);\\n    /**\\n     * @dev Register a new agreement class to the system\\n     * @param agreementClassLogic INitial agreement class code\\n     *\\n     * Modifiers:\\n     *  - onlyGovernance\\n     */\\n    function registerAgreementClass(ISuperAgreement agreementClassLogic) external;\\n\\n    event AgreementClassUpdated(bytes32 agreementType, address code);\\n    /**\\n    * @dev Update code of an agreement class\\n    * @param agreementClassLogic New code for the agreement class\\n    *\\n    * Modifiers:\\n    *  - onlyGovernance\\n    */\\n    function updateAgreementClass(ISuperAgreement agreementClassLogic) external;\\n\\n    /**\\n    * @dev Check if the agreement class is whitelisted\\n    */\\n    function isAgreementTypeListed(bytes32 agreementType) external view returns(bool yes);\\n\\n    /**\\n    * @dev Check if the agreement class is whitelisted\\n    */\\n    function isAgreementClassListed(ISuperAgreement agreementClass) external view returns(bool yes);\\n\\n    /**\\n    * @dev Get agreement class\\n    */\\n    function getAgreementClass(bytes32 agreementType) external view returns(ISuperAgreement agreementClass);\\n\\n    /**\\n    * @dev Map list of the agreement classes using a bitmap\\n    * @param bitmap Agreement class bitmap\\n    */\\n    function mapAgreementClasses(uint256 bitmap)\\n        external view\\n        returns (ISuperAgreement[] memory agreementClasses);\\n\\n    /**\\n    * @dev Create a new bitmask by adding a agreement class to it.\\n    * @param bitmap Agreement class bitmap\\n    */\\n    function addToAgreementClassesBitmap(uint256 bitmap, bytes32 agreementType)\\n        external view\\n        returns (uint256 newBitmap);\\n\\n    /**\\n    * @dev Create a new bitmask by removing a agreement class from it.\\n    * @param bitmap Agreement class bitmap\\n    */\\n    function removeFromAgreementClassesBitmap(uint256 bitmap, bytes32 agreementType)\\n        external view\\n        returns (uint256 newBitmap);\\n\\n    /**************************************************************************\\n    * Super Token Factory\\n    **************************************************************************/\\n\\n    /**\\n     * @dev Get the super token factory\\n     * @return factory The factory\\n     */\\n    function getSuperTokenFactory() external view returns (ISuperTokenFactory factory);\\n\\n    /**\\n     * @dev Get the super token factory logic (applicable to upgradable deployment)\\n     * @return logic The factory logic\\n     */\\n    function getSuperTokenFactoryLogic() external view returns (address logic);\\n\\n    event SuperTokenFactoryUpdated(ISuperTokenFactory newFactory);\\n    /**\\n     * @dev Update super token factory\\n     * @param newFactory New factory logic\\n     */\\n    function updateSuperTokenFactory(ISuperTokenFactory newFactory) external;\\n\\n    event SuperTokenLogicUpdated(ISuperToken indexed token, address code);\\n    /**\\n     * @dev Update the super token logic to the latest\\n     *\\n     * NOTE:\\n     * - Refer toISuperTokenFactory.Upgradability for expected behaviours.\\n     */\\n    function updateSuperTokenLogic(ISuperToken token) external;\\n\\n    /**************************************************************************\\n     * App Registry\\n     *************************************************************************/\\n\\n    /**\\n     * @dev App registered event\\n     */\\n    event AppRegistered(ISuperApp indexed app);\\n\\n    /**\\n     * @dev Jail event for the app\\n     */\\n    event Jail(ISuperApp indexed app, uint256 reason);\\n\\n    /**\\n     * @dev Message sender declares it as a super app\\n     * @param configWord The super app manifest configuration, flags are defined in\\n     *                   `SuperAppDefinitions`\\n     */\\n    function registerApp(uint256 configWord) external;\\n\\n    /**\\n     * @dev Message sender declares it as a super app, using a registration key\\n     * @param configWord The super app manifest configuration, flags are defined in\\n     *                   `SuperAppDefinitions`\\n     * @param registrationKey The registration key issued by the governance\\n     */\\n    function registerAppWithKey(uint256 configWord, string calldata registrationKey) external;\\n\\n    /**\\n     * @dev Message sender declares app as a super app\\n     * @param configWord The super app manifest configuration, flags are defined in\\n     *                   `SuperAppDefinitions`\\n     * NOTE: only factory contracts authorized by governance can register super apps\\n     */\\n    function registerAppByFactory(ISuperApp app, uint256 configWord) external;\\n\\n    /**\\n     * @dev Query if the app is registered\\n     * @param app Super app address\\n     */\\n    function isApp(ISuperApp app) external view returns(bool);\\n\\n    /**\\n     * @dev Query app level\\n     * @param app Super app address\\n     */\\n    function getAppLevel(ISuperApp app) external view returns(uint8 appLevel);\\n\\n    /**\\n     * @dev Get the manifest of the super app\\n     * @param app Super app address\\n     */\\n    function getAppManifest(\\n        ISuperApp app\\n    )\\n        external view\\n        returns (\\n            bool isSuperApp,\\n            bool isJailed,\\n            uint256 noopMask\\n        );\\n\\n    /**\\n     * @dev Query if the app has been jailed\\n     * @param app Super app address\\n     */\\n    function isAppJailed(ISuperApp app) external view returns (bool isJail);\\n\\n    /**\\n     * @dev White-list the target app for app composition for the source app (msg.sender)\\n     * @param targetApp The taget super app address\\n     */\\n    function allowCompositeApp(ISuperApp targetApp) external;\\n\\n    /**\\n     * @dev Query if source app  is allowed to call the target app as downstream app.\\n     * @param app Super app address\\n     * @param targetApp The taget super app address\\n     */\\n    function isCompositeAppAllowed(\\n        ISuperApp app,\\n        ISuperApp targetApp\\n    )\\n        external view\\n        returns (bool isAppAllowed);\\n\\n    /**************************************************************************\\n     * Agreement Framework\\n     *\\n     * Agreements use these function to trigger super app callbacks, updates\\n     * app allowance and charge gas fees.\\n     *\\n     * These functions can only be called by registered agreements.\\n     *************************************************************************/\\n\\n    function callAppBeforeCallback(\\n        ISuperApp app,\\n        bytes calldata callData,\\n        bool isTermination,\\n        bytes calldata ctx\\n    )\\n        external\\n        // onlyAgreement\\n        // isAppActive(app)\\n        returns(bytes memory cbdata);\\n\\n    function callAppAfterCallback(\\n        ISuperApp app,\\n        bytes calldata callData,\\n        bool isTermination,\\n        bytes calldata ctx\\n    )\\n        external\\n        // onlyAgreement\\n        // isAppActive(app)\\n        returns(bytes memory appCtx);\\n\\n    function appCallbackPush(\\n        bytes calldata ctx,\\n        ISuperApp app,\\n        uint256 appAllowanceGranted,\\n        int256 appAllowanceUsed,\\n        ISuperfluidToken appAllowanceToken\\n    )\\n        external\\n        // onlyAgreement\\n        returns (bytes memory appCtx);\\n\\n    function appCallbackPop(\\n        bytes calldata ctx,\\n        int256 appAllowanceUsedDelta\\n    )\\n        external\\n        // onlyAgreement\\n        returns (bytes memory newCtx);\\n\\n    function ctxUseAllowance(\\n        bytes calldata ctx,\\n        uint256 appAllowanceWantedMore,\\n        int256 appAllowanceUsedDelta\\n    )\\n        external\\n        // onlyAgreement\\n        returns (bytes memory newCtx);\\n\\n    function jailApp(\\n        bytes calldata ctx,\\n        ISuperApp app,\\n        uint256 reason\\n    )\\n        external\\n        // onlyAgreement\\n        returns (bytes memory newCtx);\\n\\n    /**************************************************************************\\n     * Contextless Call Proxies\\n     *\\n     * NOTE: For EOAs or non-app contracts, they are the entry points for interacting\\n     * with agreements or apps.\\n     *\\n     * NOTE: The contextual call data should be generated using\\n     * abi.encodeWithSelector. The context parameter should be set to \\\"0x\\\",\\n     * an empty bytes array as a placeholder to be replaced by the host\\n     * contract.\\n     *************************************************************************/\\n\\n     /**\\n      * @dev Call agreement function\\n      * @param callData The contextual call data with placeholder ctx\\n      * @param userData Extra user data being sent to the super app callbacks\\n      */\\n     function callAgreement(\\n         ISuperAgreement agreementClass,\\n         bytes calldata callData,\\n         bytes calldata userData\\n     )\\n        external\\n        //cleanCtx\\n        returns(bytes memory returnedData);\\n\\n    /**\\n     * @dev Call app action\\n     * @param callData The contextual call data.\\n     *\\n     * NOTE: See callAgreement about contextual call data.\\n     */\\n    function callAppAction(\\n        ISuperApp app,\\n        bytes calldata callData\\n    )\\n        external\\n        //cleanCtx\\n        //isAppActive(app)\\n        returns(bytes memory returnedData);\\n\\n    /**************************************************************************\\n     * Contextual Call Proxies and Context Utilities\\n     *\\n     * For apps, they must use context they receive to interact with\\n     * agreements or apps.\\n     *\\n     * The context changes must be saved and returned by the apps in their\\n     * callbacks always, any modification to the context will be detected and\\n     * the violating app will be jailed.\\n     *************************************************************************/\\n\\n    /**\\n     * @dev ABIv2 Encoded memory data of context\\n     *\\n     * NOTE on backward compatibility:\\n     * - Non-dynamic fields are padded to 32bytes and packed\\n     * - Dynamic fields are referenced through a 32bytes offset to their \\\"parents\\\" field (or root)\\n     * - The order of the fields hence should not be rearranged in order to be backward compatible:\\n     *    - non-dynamic fields will be parsed at the same memory location,\\n     *    - and dynamic fields will simply have a greater offset than it was.\\n     */\\n    struct Context {\\n        //\\n        // Call context\\n        //\\n        // callback level\\n        uint8 appLevel;\\n        // type of call\\n        uint8 callType;\\n        // the system timestsamp\\n        uint256 timestamp;\\n        // The intended message sender for the call\\n        address msgSender;\\n\\n        //\\n        // Callback context\\n        //\\n        // For callbacks it is used to know which agreement function selector is called\\n        bytes4 agreementSelector;\\n        // User provided data for app callbacks\\n        bytes userData;\\n\\n        //\\n        // App context\\n        //\\n        // app allowance granted\\n        uint256 appAllowanceGranted;\\n        // app allowance wanted by the app callback\\n        uint256 appAllowanceWanted;\\n        // app allowance used, allowing negative values over a callback session\\n        int256 appAllowanceUsed;\\n        // app address\\n        address appAddress;\\n        // app allowance in super token\\n        ISuperfluidToken appAllowanceToken;\\n    }\\n\\n    function callAgreementWithContext(\\n        ISuperAgreement agreementClass,\\n        bytes calldata callData,\\n        bytes calldata userData,\\n        bytes calldata ctx\\n    )\\n        external\\n        // validCtx(ctx)\\n        // onlyAgreement(agreementClass)\\n        returns (bytes memory newCtx, bytes memory returnedData);\\n\\n    function callAppActionWithContext(\\n        ISuperApp app,\\n        bytes calldata callData,\\n        bytes calldata ctx\\n    )\\n        external\\n        // validCtx(ctx)\\n        // isAppActive(app)\\n        returns (bytes memory newCtx);\\n\\n    function decodeCtx(bytes calldata ctx)\\n        external pure\\n        returns (Context memory context);\\n\\n    function isCtxValid(bytes calldata ctx) external view returns (bool);\\n\\n    /**************************************************************************\\n    * Batch call\\n    **************************************************************************/\\n    /**\\n     * @dev Batch operation data\\n     */\\n    struct Operation {\\n        // Operation. Defined in BatchOperation (Definitions.sol)\\n        uint32 operationType;\\n        // Operation target\\n        address target;\\n        // Data specific to the operation\\n        bytes data;\\n    }\\n\\n    /**\\n     * @dev Batch call function\\n     * @param operations Array of batch operations.\\n     */\\n    function batchCall(Operation[] memory operations) external;\\n\\n    /**\\n     * @dev Batch call function for trusted forwarders (EIP-2771)\\n     * @param operations Array of batch operations.\\n     */\\n    function forwardBatchCall(Operation[] memory operations) external;\\n\\n    /**************************************************************************\\n     * Function modifiers for access control and parameter validations\\n     *\\n     * While they cannot be explicitly stated in function definitions, they are\\n     * listed in function definition comments instead for clarity.\\n     *\\n     * TODO: turning these off because solidity-coverage don't like it\\n     *************************************************************************/\\n\\n     /* /// @dev The current superfluid context is clean.\\n     modifier cleanCtx() virtual;\\n\\n     /// @dev The superfluid context is valid.\\n     modifier validCtx(bytes memory ctx) virtual;\\n\\n     /// @dev The agreement is a listed agreement.\\n     modifier isAgreement(ISuperAgreement agreementClass) virtual;\\n\\n     // onlyGovernance\\n\\n     /// @dev The msg.sender must be a listed agreement.\\n     modifier onlyAgreement() virtual;\\n\\n     /// @dev The app is registered and not jailed.\\n     modifier isAppActive(ISuperApp app) virtual; */\\n}\\n\",\"keccak256\":\"0x987a883e8acd87e07eb00ebb1c882d294c7a0af2e5a8cb234270f83f4168438f\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport { ISuperAgreement } from \\\"./ISuperAgreement.sol\\\";\\nimport { ISuperToken } from \\\"./ISuperToken.sol\\\";\\nimport { ISuperfluidToken  } from \\\"./ISuperfluidToken.sol\\\";\\nimport { ISuperfluid } from \\\"./ISuperfluid.sol\\\";\\n\\n\\n/**\\n * @dev Superfluid's Governance interface\\n *\\n * @author Superfluid\\n */\\ninterface ISuperfluidGovernance {\\n\\n    /**\\n     * @dev Replace the current governance with a new governance\\n     */\\n    function replaceGovernance(\\n        ISuperfluid host,\\n        address newGov) external;\\n\\n    /**\\n     * @dev Register a new agreement class\\n     */\\n    function registerAgreementClass(\\n        ISuperfluid host,\\n        address agreementClass) external;\\n\\n    /**\\n     * @dev Update logics of the contracts\\n     *\\n     * NOTE:\\n     * - Because they might have inter-dependencies, it is good to have one single function to update them all\\n     */\\n    function updateContracts(\\n        ISuperfluid host,\\n        address hostNewLogic,\\n        address[] calldata agreementClassNewLogics,\\n        address superTokenFactoryNewLogic\\n    ) external;\\n\\n    /**\\n     * @dev Update supertoken logic contract to the latest that is managed by the super token factory\\n     */\\n    function batchUpdateSuperTokenLogic(\\n        ISuperfluid host,\\n        ISuperToken[] calldata tokens) external;\\n\\n    /// @dev Get configuration as address value\\n    function getConfigAsAddress(\\n        ISuperfluid host,\\n        ISuperfluidToken superToken,\\n        bytes32 key) external view returns (address value);\\n\\n    /// @dev Get configuration as uint256 value\\n    function getConfigAsUint256(\\n        ISuperfluid host,\\n        ISuperfluidToken superToken,\\n        bytes32 key) external view returns (uint256 value);\\n\\n}\\n\",\"keccak256\":\"0x2ac401c7fb012ef43d8becad0196bcd41ac9ad33778a7a5e4809a1740a646e63\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport { ISuperAgreement } from \\\"./ISuperAgreement.sol\\\";\\n\\n\\n/**\\n * @title Superfluid's token interface.\\n *\\n * @author Superfluid\\n */\\ninterface ISuperfluidToken {\\n\\n    /**************************************************************************\\n     * Basic information\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Get superfluid host contract address\\n     */\\n    function getHost() external view returns(address host);\\n\\n    /**************************************************************************\\n     * Real-time balance functions\\n     *************************************************************************/\\n\\n    /**\\n    * @dev Calculate the real balance of a user, taking in consideration all agreements of the account\\n    * @param account for the query\\n    * @param timestamp Time of balance\\n    * @return availableBalance Real-time balance\\n    * @return deposit Account deposit\\n    * @return owedDeposit Account owed Deposit\\n    */\\n    function realtimeBalanceOf(\\n       address account,\\n       uint256 timestamp\\n    )\\n        external view\\n        returns (\\n            int256 availableBalance,\\n            uint256 deposit,\\n            uint256 owedDeposit);\\n\\n    /// @dev realtimeBalanceOf with timestamp equals to block timestamp\\n    function realtimeBalanceOfNow(\\n       address account\\n    )\\n        external view\\n        returns (\\n            int256 availableBalance,\\n            uint256 deposit,\\n            uint256 owedDeposit,\\n            uint256 timestamp);\\n\\n    /**\\n    * @dev Check if one account is critical\\n    * @param account Account check if is critical by a future time\\n    * @param timestamp Time of balance\\n    * @return isCritical\\n    */\\n    function isAccountCritical(\\n        address account,\\n        uint256 timestamp\\n    )\\n        external view\\n        returns(bool isCritical);\\n\\n    /**\\n    * @dev Check if one account is critical now\\n    * @param account Account check if is critical by a future time\\n    * @return isCritical\\n    */\\n    function isAccountCriticalNow(\\n        address account\\n    )\\n        external view\\n        returns(bool isCritical);\\n\\n    /**\\n     * @dev Check if one account is solvent\\n     * @param account Account check if is solvent by a future time\\n     * @param timestamp Time of balance\\n     * @return isSolvent\\n     */\\n    function isAccountSolvent(\\n        address account,\\n        uint256 timestamp\\n    )\\n        external view\\n        returns(bool isSolvent);\\n\\n    /**\\n     * @dev Check if one account is solvent now\\n     * @param account Account check if is solvent now\\n     * @return isSolvent\\n     */\\n    function isAccountSolventNow(\\n        address account\\n    )\\n        external view\\n        returns(bool isSolvent);\\n\\n    /**\\n    * @dev Get a list of agreements that is active for the account\\n    * @dev An active agreement is one that has state for the account\\n    * @param account Account to query\\n    * @return activeAgreements List of accounts that have non-zero states for the account\\n    */\\n    function getAccountActiveAgreements(address account)\\n       external view\\n       returns(ISuperAgreement[] memory activeAgreements);\\n\\n\\n   /**************************************************************************\\n    * Super Agreement hosting functions\\n    *************************************************************************/\\n\\n    /**\\n     * @dev Create a new agreement\\n     * @param id Agreement ID\\n     * @param data Agreement data\\n     */\\n    function createAgreement(\\n        bytes32 id,\\n        bytes32[] calldata data\\n    )\\n        external;\\n\\n    /**\\n     * @dev Agreement creation event\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     * @param data Agreement data\\n     */\\n    event AgreementCreated(\\n        address indexed agreementClass,\\n        bytes32 id,\\n        bytes32[] data\\n    );\\n\\n    /**\\n     * @dev Get data of the agreement\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     * @return data Data of the agreement\\n     */\\n    function getAgreementData(\\n        address agreementClass,\\n        bytes32 id,\\n        uint dataLength\\n    )\\n        external view\\n        returns(bytes32[] memory data);\\n\\n    /**\\n     * @dev Create a new agreement\\n     * @param id Agreement ID\\n     * @param data Agreement data\\n     */\\n    function updateAgreementData(\\n        bytes32 id,\\n        bytes32[] calldata data\\n    )\\n        external;\\n\\n    /**\\n     * @dev Agreement creation event\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     * @param data Agreement data\\n     */\\n    event AgreementUpdated(\\n        address indexed agreementClass,\\n        bytes32 id,\\n        bytes32[] data\\n    );\\n\\n    /**\\n     * @dev Close the agreement\\n     * @param id Agreement ID\\n     */\\n    function terminateAgreement(\\n        bytes32 id,\\n        uint dataLength\\n    )\\n        external;\\n\\n    /**\\n     * @dev Agreement termination event\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     */\\n    event AgreementTerminated(\\n        address indexed agreementClass,\\n        bytes32 id\\n    );\\n\\n    /**\\n     * @dev Update agreement state slot\\n     * @param account Account to be updated\\n     *\\n     * NOTE\\n     * - To clear the storage out, provide zero-ed array of intended length\\n     */\\n    function updateAgreementStateSlot(\\n        address account,\\n        uint256 slotId,\\n        bytes32[] calldata slotData\\n    )\\n        external;\\n\\n    /**\\n     * @dev Agreement account state updated event\\n     * @param agreementClass Contract address of the agreement\\n     * @param account Account updated\\n     * @param slotId slot id of the agreement state\\n     */\\n    event AgreementStateUpdated(\\n        address indexed agreementClass,\\n        address indexed account,\\n        uint256 slotId\\n    );\\n\\n    /**\\n     * @dev Get data of the slot of the state of a agreement\\n     * @param agreementClass Contract address of the agreement\\n     * @param account Account to query\\n     * @param slotId slot id of the state\\n     * @param dataLength length of the state data\\n     */\\n    function getAgreementStateSlot(\\n        address agreementClass,\\n        address account,\\n        uint256 slotId,\\n        uint dataLength\\n    )\\n        external view\\n        returns (bytes32[] memory slotData);\\n\\n    /**\\n     * @dev Agreement account state updated event\\n     * @param agreementClass Contract address of the agreement\\n     * @param account Account of the agrement\\n     * @param state Agreement state of the account\\n     */\\n    event AgreementAccountStateUpdated(\\n        address indexed agreementClass,\\n        address indexed account,\\n        bytes state\\n    );\\n\\n    /**\\n     * @dev Settle balance from an account by the agreement.\\n     *      The agreement needs to make sure that the balance delta is balanced afterwards\\n     * @param account Account to query.\\n     * @param delta Amount of balance delta to be settled\\n     *\\n     * Modifiers:\\n     *  - onlyAgreement\\n     */\\n    function settleBalance(\\n        address account,\\n        int256 delta\\n    )\\n        external;\\n\\n    /**\\n     * @dev Agreement liquidation event (DEPRECATED BY AgreementLiquidatedBy)\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     * @param penaltyAccount Account of the agreement to be penalized\\n     * @param rewardAccount Account that collect the reward\\n     * @param rewardAmount Amount of liquidation reward\\n     */\\n    event AgreementLiquidated(\\n        address indexed agreementClass,\\n        bytes32 id,\\n        address indexed penaltyAccount,\\n        address indexed rewardAccount,\\n        uint256 rewardAmount\\n    );\\n\\n    /**\\n     * @dev System bailout occurred (DEPRECATIED BY AgreementLiquidatedBy)\\n     * @param bailoutAccount Account that bailout the penalty account\\n     * @param bailoutAmount Amount of account bailout\\n     */\\n    event Bailout(\\n        address indexed bailoutAccount,\\n        uint256 bailoutAmount\\n    );\\n\\n    /**\\n     * @dev Agreement liquidation event (including agent account)\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     * @param liquidatorAccount Account of the agent that performed the liquidation.\\n     * @param penaltyAccount Account of the agreement to be penalized\\n     * @param bondAccount Account that collect the reward or bailout accounts\\n     * @param rewardAmount Amount of liquidation reward\\n     * @param bailoutAmount Amount of liquidation bailouot\\n     *\\n     * NOTE:\\n     * Reward account rule:\\n     * - if bailout is equal to 0, then\\n     *   - the bondAccount will get the rewardAmount,\\n     *   - the penaltyAccount will pay for the rewardAmount.\\n     * - if bailout is larger than 0, then\\n     *   - the liquidatorAccount will get the rewardAmouont,\\n     *   - the bondAccount will pay for both the rewardAmount and bailoutAmount,\\n     *   - the penaltyAccount will pay for the rewardAmount while get the bailoutAmount.\\n     */\\n    event AgreementLiquidatedBy(\\n        address liquidatorAccount,\\n        address indexed agreementClass,\\n        bytes32 id,\\n        address indexed penaltyAccount,\\n        address indexed bondAccount,\\n        uint256 rewardAmount,\\n        uint256 bailoutAmount\\n    );\\n\\n    /**\\n     * @dev Make liquidation payouts\\n     * @param id Agreement ID\\n     * @param liquidator Address of the executer of liquidation\\n     * @param penaltyAccount Account of the agreement to be penalized\\n     * @param rewardAmount Amount of liquidation reward\\n     * @param bailoutAmount Amount of account bailout needed\\n     *\\n     * NOTE:\\n     * Liquidation rules:\\n     *  - If a bailout is required (bailoutAmount > 0)\\n     *     - the actual reward goes to the liquidator,\\n     *     - while the reward account becomes the bailout account\\n     *     - total bailout include: bailout amount + reward amount\\n     *\\n     * Modifiers:\\n     *  - onlyAgreement\\n     */\\n    function makeLiquidationPayouts\\n    (\\n        bytes32 id,\\n        address liquidator,\\n        address penaltyAccount,\\n        uint256 rewardAmount,\\n        uint256 bailoutAmount\\n    )\\n        external;\\n\\n    /**************************************************************************\\n     * Function modifiers for access control and parameter validations\\n     *\\n     * While they cannot be explicitly stated in function definitions, they are\\n     * listed in function definition comments instead for clarity.\\n     *\\n     * NOTE: solidity-coverage not supporting it\\n     *************************************************************************/\\n\\n     /// @dev The msg.sender must be host contract\\n     //modifier onlyHost() virtual;\\n\\n    /// @dev The msg.sender must be a listed agreement.\\n    //modifier onlyAgreement() virtual;\\n\\n}\\n\",\"keccak256\":\"0xc658bc41894eecb8f64de68b92011c66b9ae2ec4d0373321c3f558a527f8ecc4\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.5.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { TokenInfo } from \\\"./TokenInfo.sol\\\";\\n\\n\\n/**\\n *\\n * @dev Interface for ERC20 token with token info\\n *\\n * NOTE: Using abstract contract instead of interfaces because old solidity\\n * does not support interface inheriting other interfaces\\n * solhint-disable-next-line no-empty-blocks\\n *\\n */\\n// solhint-disable-next-line no-empty-blocks\\nabstract contract ERC20WithTokenInfo is IERC20, TokenInfo {}\\n\",\"keccak256\":\"0x808d3a486826e7f119671174a77896c6e23578e691625350dbb3e9f74a0d5137\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.5.0;\\n\\n/**\\n * @dev ERC20 token info interface\\n *\\n * NOTE: ERC20 standard interface does not specify these functions, but\\n * often the token implementations have them.\\n *\\n */\\ninterface TokenInfo {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x4dee21b8f64edbfe811a300d31f529b5367d1186d69b8b2b8dc3373be7a108b0\",\"license\":\"AGPLv3\"},\"contracts/Common/IERC20Mod.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * Modified IERC20 interface.\\n * @dev This interface is used to access decimals of an ERC20 token.\\n */\\ninterface IERC20Mod is IERC20 {\\n    function decimals() external view returns (uint8);\\n}\",\"keccak256\":\"0x25f6b0d8f24af8e0dfb2c7f83a54a594f4351b7155492d61ac0d174bf97bfcab\",\"license\":\"Unlicensed\"},\"contracts/Common/SFHelper.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.4;\\nimport { ISuperfluid, ISuperToken, ISuperAgreement, ISuperApp } from \\\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\\\";\\nimport { IConstantFlowAgreementV1 } from \\\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol\\\";\\nimport { IInstantDistributionAgreementV1 } from \\\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IInstantDistributionAgreementV1.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title Superfluid helper library.\\n * @author rashtrakoff <rashtrakoff@pm.me>.\\n * @dev Contains functions which help in interacting with Superfluid contracts.\\n * @custom:experimental This is an experimental contract/library. Use at your own risk.\\n */\\n// solhint-disable not-rely-on-time\\nlibrary SFHelper {\\n    event NewSupertokenAdded(address _superToken, uint32 _index);\\n    event NewTemporaryIndexCreated(address _superToken, uint32 _index);\\n\\n    ISuperfluid public constant HOST =\\n        ISuperfluid(0x3E14dC1b13c488a8d5D310918780c983bD5982E7);\\n    IConstantFlowAgreementV1 public constant CFA_V1 =\\n        IConstantFlowAgreementV1(0x6EeE6060f715257b970700bc2656De21dEdF074C);\\n    IInstantDistributionAgreementV1 public constant IDA_V1 =\\n        IInstantDistributionAgreementV1(\\n            0xB0aABBA4B2783A72C52956CDEF62d438ecA2d7a1\\n        );\\n\\n    /// Function to distribute a supertoken amount according to an index.\\n    /// @param _superToken The supertoken to be distributed.\\n    /// @param _index Index containing share details.\\n    /// @param _amount Amount of `_supertoken` to be distributed.\\n    function distribute(\\n        ISuperToken _superToken,\\n        uint32 _index,\\n        uint256 _amount\\n    ) external returns (bytes memory _newCtx) {\\n        console.log(\\n            \\\"Amount to distribute: %s, Index: %s, DHPTx: %s\\\",\\n            _amount,\\n            _index,\\n            _superToken.balanceOf(address(this))\\n        );\\n        (uint256 _actualAmount, ) = IDA_V1.calculateDistribution(\\n            _superToken,\\n            address(this),\\n            _index,\\n            _amount\\n        );\\n\\n        require(_amount >= _actualAmount, \\\"SFHelper: !enough tokens\\\");\\n\\n        _newCtx = HOST.callAgreement(\\n            IDA_V1,\\n            abi.encodeWithSelector(\\n                IDA_V1.distribute.selector,\\n                _superToken,\\n                _index,\\n                _actualAmount,\\n                new bytes(0)\\n            ),\\n            new bytes(0)\\n        );\\n\\n        console.log(\\\"Actual amount distributed: %s\\\", _actualAmount);\\n    }\\n\\n    \\n    /// Function to create a distribution index.\\n    /// @param _superToken The supertoken to be distributed.\\n    /// @param _index New index value containing share details.\\n    function createIndex(ISuperToken _superToken, uint32 _index)\\n        external\\n        returns (bytes memory _newCtx)\\n    {\\n        _newCtx = HOST.callAgreement(\\n            IDA_V1,\\n            abi.encodeWithSelector(\\n                IDA_V1.createIndex.selector,\\n                _superToken,\\n                _index,\\n                new bytes(0) // placeholder ctx\\n            ),\\n            new bytes(0) // userData\\n        );\\n\\n        emit NewSupertokenAdded(address(_superToken), _index);\\n    }\\n\\n    \\n    /// Function to create a distribution index.\\n    /// @param _superToken The supertoken to be distributed.\\n    /// @param _index New index value containing share details.\\n    function createIndexInCallback(\\n        ISuperToken _superToken,\\n        uint32 _index,\\n        bytes calldata _ctx\\n    ) external returns (bytes memory _newCtx) {\\n        (_newCtx, ) = HOST.callAgreementWithContext(\\n            IDA_V1,\\n            abi.encodeWithSelector(\\n                IDA_V1.createIndex.selector,\\n                _superToken,\\n                _index,\\n                new bytes(0) // placeholder ctx\\n            ),\\n            new bytes(0), // userData\\n            _ctx\\n        );\\n\\n        emit NewTemporaryIndexCreated(address(_superToken), _index);\\n    }\\n\\n    \\n    /// @dev Function to update shares of a user.\\n    /// @param _superStreamToken The supertoken that the user is streaming.\\n    /// @param _superDistToken The supertoken that's distributed in index with value `_index`.\\n    /// @param _index Index containing share details.\\n    /// @param _ctx Superfluid context object.\\n    function updateSharesInCallback(\\n        ISuperToken _superStreamToken,\\n        ISuperToken _superDistToken,\\n        uint32 _index,\\n        bytes calldata _ctx\\n    ) external returns (bytes memory _newCtx) {\\n        address _msgSender = HOST.decodeCtx(_ctx).msgSender;\\n        (, int96 _flowRate) = getFlow(_superStreamToken, _msgSender);\\n        uint256 _userFlowRate = uint256(uint96(_flowRate));\\n\\n        (_newCtx, ) = HOST.callAgreementWithContext(\\n            IDA_V1,\\n            abi.encodeWithSelector(\\n                IDA_V1.updateSubscription.selector,\\n                _superDistToken,\\n                _index,\\n                _msgSender,\\n                uint128(_userFlowRate / 1e9),\\n                new bytes(0)\\n            ),\\n            new bytes(0),\\n            _ctx\\n        );\\n    }\\n\\n    /// To be used when assigning shares in a temporary index.\\n    /// @param _superDistToken Distribution supertoken.\\n    /// @param _index Index ID in which shares need to be updated.\\n    /// @param _units Number of units to be assigned.\\n    /// @param _ctx Superfluid context object.\\n    function updateSharesInCallback(\\n        ISuperToken _superDistToken,\\n        uint32 _index,\\n        uint128 _units,\\n        bytes calldata _ctx\\n    ) external returns (bytes memory _newCtx) {\\n        address _msgSender = HOST.decodeCtx(_ctx).msgSender;\\n\\n        (_newCtx, ) = HOST.callAgreementWithContext(\\n            IDA_V1,\\n            abi.encodeWithSelector(\\n                IDA_V1.updateSubscription.selector,\\n                _superDistToken,\\n                _index,\\n                _msgSender,\\n                _units,\\n                new bytes(0)\\n            ),\\n            new bytes(0),\\n            _ctx\\n        );\\n    }\\n\\n    function deleteSubscriptionInCallback(\\n        ISuperToken _superToken,\\n        uint32 _index,\\n        bytes calldata _ctx\\n    ) external returns (bytes memory _newCtx) {\\n        address _msgSender = HOST.decodeCtx(_ctx).msgSender;\\n\\n        (_newCtx, ) = HOST.callAgreementWithContext(\\n            IDA_V1,\\n            abi.encodeWithSelector(\\n                IDA_V1.deleteSubscription.selector,\\n                _superToken,\\n                address(this),\\n                _index,\\n                _msgSender,\\n                new bytes(0)\\n            ),\\n            new bytes(0),\\n            _ctx\\n        );\\n    }\\n\\n    \\n    /// Function to close a stream.\\n    /// @dev This function should be called provided the app is jailed or user is running low on supertokens.\\n    /// @param _superToken The supertoken that the user is streaming\\n    /// @param _user Address of the user\\n    function emergencyCloseStream(ISuperToken _superToken, address _user)\\n        external\\n    {\\n        bool _close;\\n\\n        // Check whether the app is jailed and if so, proceed with stream termination\\n        if (HOST.isAppJailed(ISuperApp(address(this)))) _close = true;\\n        else {\\n            int96 _flowRate = CFA_V1.getNetFlow(_superToken, _user);\\n\\n            if (_flowRate < 0) {\\n                uint256 _balance = _superToken.balanceOf(_user);\\n                uint256 _positiveFlowRate = uint256(uint96(-1 * _flowRate));\\n\\n                // console.log(\\\"Balance: %s, +flowRate: %s\\\", _balance, _positiveFlowRate);\\n\\n                // if user has less liquidity ( <= 12 hours worth) close the stream\\n                if (_balance <= _positiveFlowRate * 12 hours) _close = true;\\n            }\\n        }\\n\\n        if (_close) {\\n            HOST.callAgreement(\\n                CFA_V1,\\n                abi.encodeWithSelector(\\n                    CFA_V1.deleteFlow.selector,\\n                    _superToken,\\n                    _user,\\n                    address(this),\\n                    new bytes(0) // placeholder\\n                ),\\n                \\\"0x\\\"\\n            );\\n        } else revert(\\\"SFHelper: No emergency close\\\");\\n    }\\n\\n    /// Function to get an index's details.\\n    /// @param _superToken Supertoken of the corresponding index.\\n    /// @param _indexId ID of the index whose details we require.\\n    function getIndex(ISuperToken _superToken, uint32 _indexId)\\n        external\\n        view\\n        returns (\\n            bool _exist,\\n            uint128 _indexValue,\\n            uint128 _totalUnitsApproved,\\n            uint128 _totalUnitsPending\\n        )\\n    {\\n        return IDA_V1.getIndex(_superToken, address(this), _indexId);\\n    }\\n\\n    /// Function to get details of a user's subscription (IDA subscription).\\n    /// @param _superToken Supertoken of the corresponding index.\\n    /// @param _index ID of the index in which the user's subscription is present.\\n    /// @param _user Address of the user whose subscription details we need.\\n    function getSubscription(\\n        ISuperToken _superToken,\\n        uint32 _index,\\n        address _user\\n    )\\n        external\\n        view\\n        returns (\\n            bool _exist,\\n            bool _approved,\\n            uint128 _units,\\n            uint256 _pendingDistribution\\n        )\\n    {\\n        return\\n            IDA_V1.getSubscription(_superToken, address(this), _index, _user);\\n    }\\n\\n    \\n    /// Calculates uninvested amount of a user.\\n    /// @param _superToken Token being streamed.\\n    /// @param _user Address of the user.\\n    /// @param _lastDepositAt Last time a token was deposited to a dHEDGE pool.\\n    /// @return _userUninvested User's uninvested amount.\\n    function calcUserUninvested(\\n        ISuperToken _superToken,\\n        address _user,\\n        uint256 _lastDepositAt\\n    ) external view returns (uint256) {\\n        (\\n            ,\\n            /* uint256 _userPrevUpdateTimestamp */\\n            int96 _flowRate\\n        ) = getFlow(_superToken, _user);\\n        uint256 _userFlowRate = uint256(uint96(_flowRate));\\n\\n        return _userFlowRate * (block.timestamp - _lastDepositAt);\\n    }\\n\\n    \\n    /// Function to get the flow rate of a user.\\n    /// @param _superToken Address of the supertoken.\\n    /// @param _sender Address of the user.\\n    /// @return _timestamp Timestamp corresponding to previous stream rate update time.\\n    /// @return _flowRate Flow rate of a user.\\n    function getFlow(ISuperToken _superToken, address _sender)\\n        public\\n        view\\n        returns (uint256 _timestamp, int96 _flowRate)\\n    {\\n        (_timestamp, _flowRate, , ) = CFA_V1.getFlow(\\n            _superToken,\\n            _sender,\\n            address(this)\\n        );\\n    }\\n\\n    /// Checks if the caller is the SF host contract.\\n    function _onlyHost() internal view {\\n        require(\\n            msg.sender == address(HOST),\\n            \\\"SFHelper: Supports only one host\\\"\\n        );\\n    }\\n\\n    // /// Checks if the agreement is of type CFA or IDA.\\n    // function _onlyExpected(address _agreementClass) internal view {\\n    //     require(\\n    //         ISuperAgreement(_agreementClass).agreementType() ==\\n    //             keccak256(\\n    //                 \\\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1\\\"\\n    //             ) ||\\n    //             ISuperAgreement(_agreementClass).agreementType() ==\\n    //             keccak256(\\n    //                 \\\"org.superfluid-finance.agreements.InstantDistributionAgreement.v1\\\"\\n    //             ),\\n    //         \\\"SFHelper: Callback called illegaly\\\"\\n    //     );\\n    // }\\n}\\n\",\"keccak256\":\"0xb5309b27f6279ffde1164c453525e6f25367f06db6bc80b3daa6f1724141ac24\",\"license\":\"Unlicensed\"},\"contracts/dHedge-Factory-Version/Interfaces/IdHedge.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.10;\\n\\ninterface IPoolLogic {\\n    /// @notice Deposit funds into the pool\\n    /// @param _asset Address of the token\\n    /// @param _amount Amount of tokens to deposit\\n    /// @return liquidityMinted Amount of liquidity minted\\n    function deposit(address _asset, uint256 _amount)\\n        external\\n        returns (uint256 liquidityMinted);\\n\\n    /// @notice Withdraw assets based on the fund token amount\\n    /// @param _fundTokenAmount the fund token amount\\n    function withdraw(uint256 _fundTokenAmount) external;\\n\\n    /// @notice Pool manager logic address for a pool\\n    function poolManagerLogic() external view returns (address);\\n\\n    /// @notice Get exit remaining time of the pool\\n    /// @return remaining The remaining exit time of the pool\\n    function getExitRemainingCooldown(address sender)\\n        external\\n        view\\n        returns (uint256 remaining);\\n}\\n\\ninterface IPoolManagerLogic {\\n    struct Asset {\\n        address asset;\\n        bool isDeposit;\\n    }\\n\\n    /// @notice Get all the supported assets\\n    /// @return Return array of supported assets\\n    function getSupportedAssets() external view returns (Asset[] memory);\\n\\n    /// @notice Get all the deposit assets\\n    /// @return Return array of deposit assets' addresses\\n    function getDepositAssets() external view returns (address[] memory);\\n\\n    /// @notice Return true if it's supported asset, false otherwise\\n    /// @param asset address of the asset\\n    function isSupportedAsset(address asset) external view returns (bool);\\n\\n    /// @notice Return true if it's deposit asset, false otherwise\\n    /// @param asset address of the asset\\n    function isDepositAsset(address asset) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x61068a56e240bab9f620bdb770043050376e28067de998a921e23854b4a3479e\",\"license\":\"Unlicensed\"},\"contracts/dHedge-Factory-Version/Interfaces/IdHedgeCore.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.10;\\n\\nimport { ISuperToken } from \\\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\\\";\\n\\ninterface IdHedgeCore {\\n    event EmergencyWithdraw(address token);\\n    event CoreDeactivated(string message);\\n    event CoreReactivated(string message);\\n    event StreamModified(ISuperToken superToken, address user);\\n\\n    function dHedgeDeposit(address _token) external;\\n\\n    function emergencyCloseStream(ISuperToken _superToken, address _user)\\n        external;\\n\\n    function checkCoreActive() external view returns (bool);\\n\\n    // function getLatestDistIndex() external view returns (uint32);\\n    function getUserDistIndex(address _user, address _token)\\n        external\\n        view\\n        returns (uint32);\\n\\n    function getTokenDistIndices(address _token)\\n        external\\n        view\\n        returns (\\n            uint32,\\n            uint32,\\n            uint32,\\n            uint32\\n        );\\n\\n    function calcUserUninvested(address _user, address _token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function requireUpkeep() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa3982982bb4b0d0753dc8c654ecab45f4f0f8e1fa2836ddbeab22eda4a3205f8\",\"license\":\"Unlicensed\"},\"contracts/dHedge-Factory-Version/Interfaces/IdHedgeCoreFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.10;\\n\\ninterface IdHedgeCoreFactory {\\n    event CoreCreated(address newCore, address pool, address poolSuperToken);\\n    event ImplementationChanged(address newImplementation, string message);\\n    event FeeRateChanged(uint32 newFeeRate);\\n    event DAOAddressChanged(address newDAOAddr);\\n\\n    function dao() external view returns (address);\\n\\n    function defaultFeeRate() external view returns (uint32);\\n}\\n\",\"keccak256\":\"0x080fe169877c32ea027d9864882824a5cc403aa662c9b6b53a9804b3445346e8\",\"license\":\"Unlicensed\"},\"contracts/dHedge-Factory-Version/Libraries/dHedgeHelper.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.10;\\nimport { IPoolLogic, IPoolManagerLogic } from \\\"../Interfaces/IdHedge.sol\\\";\\nimport { IdHedgeCoreFactory } from \\\"../Interfaces/IdHedgeCoreFactory.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./dHedgeStorage.sol\\\";\\nimport \\\"../../Common/SFHelper.sol\\\";\\nimport { IERC20Mod } from \\\"../../Common/IERC20Mod.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title dHEDGE helper library.\\n * @author rashtrakoff <rashtrakoff@pm.me>.\\n * @dev Contains functions for interacting with dHEDGE protocol pools.\\n * @custom:experimental This is an experimental contract/library. Use at your own risk.\\n */\\n\\n// solhint-disable reason-string\\n// solhint-disable not-rely-on-time\\n// solhint-disable contract-name-camelcase\\nlibrary dHedgeHelper {\\n    using SafeERC20 for IERC20;\\n    using SFHelper for ISuperToken;\\n\\n    event TokenDeposited(\\n        address token,\\n        uint256 amount,\\n        uint256 liquidityMinted\\n    );\\n    event UpfrontFeeReturned(\\n        ISuperToken superToken,\\n        address sender,\\n        uint256 amount\\n    );\\n    event UpfrontFeeDeposited(\\n        ISuperToken superToken,\\n        address sender,\\n        uint256 amount\\n    );\\n\\n    /// Initialise a market for a new token.\\n    /// This means, create 3 indices (2 permanent and 1 temporary) along with unlimited approval-\\n    /// for the underlying token to the dHEDGE pool.\\n    /// @param _dHedgePool Struct containing details regarding the pool and various tokens in it.\\n    /// @param _superToken The supertoken which needs to be initialised.\\n    function initStreamToken(\\n        dHedgeStorage.dHedgePool storage _dHedgePool,\\n        ISuperToken _superToken\\n    ) external {\\n        address _underlyingToken = _superToken.getUnderlyingToken();\\n        dHedgeStorage.TokenData storage tokenData = _dHedgePool.tokenData[\\n            _underlyingToken\\n        ];\\n\\n        // The underlying token should be accepted by the dHEDGE pool. However,\\n        // initialising a token which isn't supported by dHEDGE pool at the time of execution-\\n        // of this function won't create any issues. We can remove this check for gas optimisations.\\n        require(\\n            IPoolManagerLogic(\\n                IPoolLogic(_dHedgePool.poolLogic).poolManagerLogic()\\n            ).isDepositAsset(_underlyingToken),\\n            \\\"dHedgeHelper: Not deposit asset\\\"\\n        );\\n\\n        // If the underlying token is already initialised, it will already have a corresponding-\\n        // supertoken. Hence, no need for re-initialisation. If the supertoken turns out to be malicious,\\n        // then we can't do anything about it after the fact. If possible, check if the supertoken being-\\n        // initialised was created by the supertoken factory contract. This isn't a major issue though.\\n        // For the time-being, we can make this function conform to `onlyOwner` condition.\\n        require(\\n            address(tokenData.superToken) == address(0),\\n            \\\"dHedgeHelper: Token already present\\\"\\n        );\\n\\n        // Create 2 permanent indices in accordance with `3-index` approach.\\n        uint32 _latestDistIndex = _dHedgePool.latestDistIndex;\\n        tokenData.permDistIndex1.indexId = _latestDistIndex;\\n        tokenData.permDistIndex2.indexId = _latestDistIndex + 1;\\n        tokenData.tempDistIndex = _latestDistIndex + 2;\\n\\n        // We will start the stream of the supertoken using the first index and hence, index 2 is locked.\\n        tokenData.lockedIndexId = _latestDistIndex + 1;\\n        _dHedgePool.latestDistIndex += 3;\\n\\n        tokenData.superToken = _superToken;\\n\\n        bytes memory _newCtx = _dHedgePool.DHPTx.createIndex(_latestDistIndex);\\n        _newCtx = _dHedgePool.DHPTx.createIndex(_latestDistIndex + 1);\\n        _newCtx = _dHedgePool.DHPTx.createIndex(_latestDistIndex + 2);\\n\\n        // Unlimited allowance for the dHEDGE pool so that deposits can take place efficiently.\\n        IERC20(_underlyingToken).safeIncreaseAllowance(\\n            _dHedgePool.poolLogic,\\n            type(uint256).max\\n        );\\n    }\\n\\n    /// Function to deposit tokens into a dHedge pool.\\n    /// @param _dHedgePool Struct containing details regarding the pool and various tokens in it.\\n    /// @param _depositToken Address of the underlying token (deposit token and not the supertoken).\\n    function deposit(\\n        dHedgeStorage.dHedgePool storage _dHedgePool,\\n        address _depositToken\\n    ) external {\\n        dHedgeStorage.TokenData storage tokenData = _dHedgePool.tokenData[\\n            _depositToken\\n        ];\\n        IPoolLogic _poolLogic = IPoolLogic(_dHedgePool.poolLogic);\\n        ISuperToken _superToken = tokenData.superToken;\\n        ISuperToken _DHPTx = _dHedgePool.DHPTx;\\n\\n        // If all conditions for a deposit is satisfied then proceed with the deposit.\\n        require(\\n            _checkUpkeep(tokenData, _depositToken, _dHedgePool.lastDepositAt) &&\\n                isDepositAsset(_dHedgePool, _depositToken),\\n            \\\"dHedgeHelper: Deposit not required\\\"\\n        );\\n\\n        uint32 _lockedIndexId = tokenData.lockedIndexId;\\n        uint32 _permDistIndex1 = tokenData.permDistIndex1.indexId;\\n        uint32 _permDistIndex2 = tokenData.permDistIndex2.indexId;\\n        uint32 _tempDistIndex = tokenData.tempDistIndex;\\n        uint256 _superTokenBalance = _superToken.balanceOf(address(this));\\n\\n        // Upgrade the unlocked DHPT such that DHPT is transferred to SF vesting contract.\\n        // This is because we have to proceed with next cycle of deposits without locking previous cycles' DHPT.\\n        _upgradeDHPTx(_poolLogic, _DHPTx);\\n\\n        // If `distAmount` is greater than 0 it means previous cycle's DHPT hasn't been distributed.\\n        // A distribution needs to occur before next deposit of the same underlying token.\\n        if (tokenData.distAmount != 0) {\\n            // Perform DHPTx distribution along with few other things (detailed later below).\\n            _distribute(\\n                _dHedgePool,\\n                tokenData,\\n                _DHPTx,\\n                _lockedIndexId,\\n                _tempDistIndex\\n            );\\n        }\\n\\n        // If first index is locked but second index is active then proceed with second index.\\n        if (\\n            _lockedIndexId == _permDistIndex1 &&\\n            tokenData.permDistIndex2.isActive\\n        )\\n            _lockedIndexId = _permDistIndex2;\\n\\n            // If index 2 is locked but index 1 is active then proceed with index 1.\\n        else if (\\n            _lockedIndexId == _permDistIndex2 &&\\n            tokenData.permDistIndex1.isActive\\n        ) _lockedIndexId = _permDistIndex1;\\n\\n        // Else:\\n        // - If index 1 is locked and index 2 is inactive then proceed with index 1.\\n        // - If index 2 is locked and index 1 is inactive then proceed with index 2.\\n\\n        // Calculate the amount of tokens to deposit for an index.\\n        uint256 _downgradeAmount = _getSuperTokenDepositBalance(\\n            _DHPTx,\\n            _lockedIndexId,\\n            _permDistIndex1,\\n            _permDistIndex2,\\n            _superTokenBalance\\n        );\\n\\n        // If there is anything to deposit, only then should the deposit proceed.\\n        // Index shouldn't be unlocked or locked otherwise.\\n        if (_downgradeAmount > 0) {\\n            // Downgrade amount of supertoken required for deposit.\\n            _superToken.downgrade(_downgradeAmount);\\n\\n            // Actual deposit logic. Had to break it from the main function due to stack too deep errors.\\n            _deposit(\\n                tokenData,\\n                _depositToken,\\n                IdHedgeCoreFactory(_dHedgePool.factory),\\n                _poolLogic\\n            );\\n\\n            // If `_lockedIndexId` is correct, don't modify it (gas savings).\\n            if (tokenData.lockedIndexId != _lockedIndexId)\\n                tokenData.lockedIndexId = _lockedIndexId;\\n\\n            // Update the timestamp marking when a deposit corresponding to an index took place.\\n            // This is important as uninvested amount calculations are done using this timestamp among-\\n            // other reasons.\\n            (_lockedIndexId == _permDistIndex1)\\n                ? tokenData.permDistIndex1.lastDepositAt = uint64(\\n                    block.timestamp\\n                )\\n                : tokenData.permDistIndex2.lastDepositAt = uint64(\\n                block.timestamp\\n            );\\n\\n            // Finally, update timestamp indicating when a deposit (of any token) was made into the dHEDGE pool.\\n            _dHedgePool.lastDepositAt = uint64(block.timestamp);\\n        }\\n\\n        // console.log(\\\"Deposit for index %s complete\\\", _lockedIndexId);\\n    }\\n\\n    /// Function to distribute DHPTx.\\n    /// @param _dHedgePool Struct containing details regarding the pool and various tokens in it.\\n    /// @param _depositToken Address of the underlying token (deposit token and not the supertoken).\\n    function distribute(\\n        dHedgeStorage.dHedgePool storage _dHedgePool,\\n        address _depositToken\\n    ) public {\\n        dHedgeStorage.TokenData storage tokenData = _dHedgePool.tokenData[\\n            _depositToken\\n        ];\\n        ISuperToken _DHPTx = _dHedgePool.DHPTx;\\n\\n        // Upgrade the DHPT in the contract.\\n        _upgradeDHPTx(IPoolLogic(_dHedgePool.poolLogic), _DHPTx);\\n\\n        // Should only attempt to distribute DHPTx if there are any to be distributed.\\n        require(\\n            tokenData.distAmount != 0 && _DHPTx.balanceOf(address(this)) != 0,\\n            \\\"dHedgeHelper: No amount to distribute\\\"\\n        );\\n\\n        // Actual distribution logic (detailed further down).\\n        _distribute(\\n            _dHedgePool,\\n            tokenData,\\n            _DHPTx,\\n            tokenData.lockedIndexId,\\n            tokenData.tempDistIndex\\n        );\\n    }\\n\\n    /// This function serves as the `afterAgreementCreated` hook for Superfluid CFA.\\n    /// Responsible for actions to be taken after creation of a stream (transfer buffer, update shares, etc.).\\n    /// @param _dHedgePool Struct containing details regarding the pool and various tokens in it.\\n    /// @param _sender Address of the user who is updating the stream rate.\\n    /// @param _agreementClass Tells whether it's CFA or IDA contract call.\\n    /// @param _underlyingToken Underlying token of the supertoken.\\n    /// @param _ctx Superfluid context object.\\n    /// @param _cbdata Callback data passed on from `beforeAgreementCreated` hook.\\n    function afterAgreementCreated(\\n        dHedgeStorage.dHedgePool storage _dHedgePool,\\n        address _sender,\\n        address _agreementClass,\\n        address _underlyingToken,\\n        bytes memory _ctx,\\n        bytes memory _cbdata\\n    ) external returns (bytes memory _newCtx) {\\n        _newCtx = _ctx;\\n\\n        // Execution should take place only for CFA contract. Ignore for IDA.\\n        if (\\n            ISuperAgreement(_agreementClass).agreementType() ==\\n            keccak256(\\n                \\\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1\\\"\\n            )\\n        ) {\\n            dHedgeStorage.TokenData storage tokenData = _dHedgePool.tokenData[\\n                _underlyingToken\\n            ];\\n            ISuperToken _superToken = tokenData.superToken;\\n            ISuperToken _DHPTx = _dHedgePool.DHPTx;\\n\\n            // Select the active index ID.\\n            uint32 _index = (tokenData.lockedIndexId ==\\n                tokenData.permDistIndex1.indexId)\\n                ? tokenData.permDistIndex2.indexId\\n                : tokenData.permDistIndex1.indexId;\\n            uint256 _userUninvested = abi.decode(_cbdata, (uint256));\\n\\n            // Initialise the index in case the index is inactive.\\n            _initIndex(tokenData, _index);\\n\\n            // Mark the assigned index of the user. Will be useful when updating/terminating the stream.\\n            tokenData.assignedIndex[_sender] = _index;\\n\\n            // Transfer the buffer amount (upfront fee). Requirement is explained below.\\n            _transferBuffer(\\n                _superToken,\\n                _sender,\\n                (_index == tokenData.permDistIndex1.indexId)\\n                    ? tokenData.permDistIndex1.lastDepositAt\\n                    : tokenData.permDistIndex2.lastDepositAt,\\n                _userUninvested\\n            );\\n\\n            // Assign new units in the active index.\\n            _newCtx = _superToken.updateSharesInCallback(\\n                _DHPTx,\\n                _index,\\n                _newCtx\\n            );\\n        }\\n    }\\n\\n    /// This function serves as the `afterAgreementUpdated` hook for Superfluid CFA.\\n    /// Responsible for actions to be taken after updation of stream rate (transfer buffer, update shares, etc.).\\n    /// @param _dHedgePool Struct containing details regarding the pool and various tokens in it.\\n    /// @param _sender Address of the user who is updating the stream rate.\\n    /// @param _agreementClass Tells whether it's CFA or IDA contract call.\\n    /// @param _underlyingToken Underlying token of the supertoken.\\n    /// @param _ctx Superfluid context object.\\n    /// @param _cbdata Callback data passed on from `beforeAgreementUpdated` hook.\\n    function afterAgreementUpdated(\\n        dHedgeStorage.dHedgePool storage _dHedgePool,\\n        address _sender,\\n        address _agreementClass,\\n        address _underlyingToken,\\n        bytes memory _ctx,\\n        bytes memory _cbdata\\n    ) external returns (bytes memory _newCtx) {\\n        _newCtx = _ctx;\\n\\n        if (\\n            ISuperAgreement(_agreementClass).agreementType() ==\\n            keccak256(\\n                \\\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1\\\"\\n            )\\n        ) {\\n            dHedgeStorage.TokenData storage tokenData = _dHedgePool.tokenData[\\n                _underlyingToken\\n            ];\\n            ISuperToken _superToken = tokenData.superToken;\\n            ISuperToken _DHPTx = _dHedgePool.DHPTx;\\n\\n            uint32 _lockedIndexId = tokenData.lockedIndexId;\\n            uint256 _userUninvested = abi.decode(_cbdata, (uint256));\\n\\n            // If assigned index is currently locked then we will have to initiate index migration (detailed below).\\n            if (\\n                tokenData.distAmount != 0 &&\\n                tokenData.assignedIndex[_sender] == _lockedIndexId\\n            ) {\\n                _migrateIndex(tokenData, _DHPTx, _sender, _newCtx);\\n            }\\n\\n            uint32 _currActiveIndex;\\n\\n            // If distribution hasn't happened for the previous cycle then, select the unlocked index.\\n            // Else, select the assigned index of the user as the active index.\\n            // This is because the DHPT locked in the latest cycle has already been deposited and in such a-\\n            // case, index migration isn't necessary.\\n            if (tokenData.distAmount != 0) {\\n                _currActiveIndex = (_lockedIndexId ==\\n                    tokenData.permDistIndex1.indexId)\\n                    ? tokenData.permDistIndex2.indexId\\n                    : tokenData.permDistIndex1.indexId;\\n            } else {\\n                _currActiveIndex = tokenData.assignedIndex[_sender];\\n            }\\n\\n            // Initialise the `_currActiveIndex` if not already done (detailed further down).\\n            _initIndex(tokenData, _currActiveIndex);\\n\\n            // Modify user's assignes index as the current active index if not the same.\\n            if (tokenData.assignedIndex[_sender] != _currActiveIndex)\\n                tokenData.assignedIndex[_sender] = _currActiveIndex;\\n\\n            // Transfer the buffer amount (upfront fee). Requirement is explained below.\\n            _transferBuffer(\\n                _superToken,\\n                _sender,\\n                (_currActiveIndex == tokenData.permDistIndex1.indexId)\\n                    ? tokenData.permDistIndex1.lastDepositAt\\n                    : tokenData.permDistIndex2.lastDepositAt,\\n                _userUninvested\\n            );\\n\\n            // Assigning new units in the active index.\\n            _newCtx = _superToken.updateSharesInCallback(\\n                _DHPTx,\\n                _currActiveIndex,\\n                _newCtx\\n            );\\n        }\\n    }\\n\\n    /// This function serves as the `afterAgreementTerminated` hook for Superfluid CFA.\\n    /// Responsible for actions to be taken after termination of the stream (transfer buffer, update shares, etc.).\\n    /// @param _dHedgePool Struct containing details regarding the pool and various tokens in it.\\n    /// @param _sender Address of the user who is updating the stream rate.\\n    /// @param _agreementClass Tells whether it's CFA or IDA contract call.\\n    /// @param _underlyingToken Underlying token of the supertoken.\\n    /// @param _ctx Superfluid context object.\\n    /// @param _cbdata Callback data passed on from `beforeAgreementTerminated` hook.\\n    function afterAgreementTerminated(\\n        dHedgeStorage.dHedgePool storage _dHedgePool,\\n        address _sender,\\n        address _agreementClass,\\n        address _underlyingToken,\\n        bytes memory _ctx,\\n        bytes memory _cbdata\\n    ) external returns (bytes memory _newCtx) {\\n        _newCtx = _ctx;\\n\\n        if (\\n            ISuperAgreement(_agreementClass).agreementType() ==\\n            keccak256(\\n                \\\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1\\\"\\n            )\\n        ) {\\n            dHedgeStorage.TokenData storage tokenData = _dHedgePool.tokenData[\\n                _underlyingToken\\n            ];\\n            // ISuperToken _DHPTx = _dHedgePool.DHPTx;\\n            uint32 _assignedIndex = tokenData.assignedIndex[_sender];\\n\\n            uint256 _userUninvested = abi.decode(_cbdata, (uint256));\\n\\n            // If assigned index is currently locked then we will have to initiate index migration (detailed below).\\n            if (\\n                tokenData.distAmount != 0 &&\\n                _assignedIndex == tokenData.lockedIndexId\\n            ) {\\n                /// @dev TODO check this.\\n                _newCtx = _migrateIndex(\\n                    tokenData,\\n                    _dHedgePool.DHPTx,\\n                    _sender,\\n                    _newCtx\\n                );\\n            } else {\\n                // console.log(\\\"Reached afterAgreementTerminated else\\\");\\n\\n                (uint128 _totalUnits, uint128 _userUnits) = _getUnits(\\n                    _dHedgePool.DHPTx,\\n                    _assignedIndex,\\n                    _sender\\n                );\\n\\n                // Deleting units of the user in their current index.\\n                _newCtx = _dHedgePool.DHPTx.deleteSubscriptionInCallback(\\n                    _assignedIndex,\\n                    _newCtx\\n                );\\n\\n                if (_totalUnits == _userUnits) {\\n                    if (_assignedIndex == tokenData.permDistIndex1.indexId) {\\n                        tokenData.permDistIndex1.isActive = false;\\n                        delete tokenData.permDistIndex1.lastDepositAt;\\n                    } else {\\n                        tokenData.permDistIndex2.isActive = false;\\n                        delete tokenData.permDistIndex2.lastDepositAt;\\n                    }\\n                }\\n            }\\n\\n            delete tokenData.assignedIndex[_sender];\\n\\n            /// @dev We can directly transfer the amount instead of using `_transferBuffer`.\\n            _transferBuffer(tokenData.superToken, _sender, 0, _userUninvested);\\n        }\\n    }\\n\\n    /// Helper function that's called before streams are updated or terminated.\\n    /// @param _agreementClass Tells whether it's CFA or IDA contract call.\\n    /// @param _underlyingToken Underlying token of the supertoken.\\n    /// @param _ctx Superfluid context object.\\n    /// @return _cbdata Callback data that needs to be passed on to after agreement hooks.\\n    function beforeAgreement(\\n        dHedgeStorage.dHedgePool storage _dHedgePool,\\n        address _agreementClass,\\n        address _underlyingToken,\\n        bytes memory _ctx\\n    ) external view returns (bytes memory _cbdata) {\\n        _cbdata = new bytes(0);\\n\\n        if (\\n            ISuperAgreement(_agreementClass).agreementType() ==\\n            keccak256(\\n                \\\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1\\\"\\n            )\\n        ) {\\n            address _sender = SFHelper.HOST.decodeCtx(_ctx).msgSender;\\n\\n            // Encode the uninvested amount. We calculate it before modifying the stream rate.\\n            _cbdata = abi.encode(\\n                calcUserUninvested(_dHedgePool, _sender, _underlyingToken)\\n            );\\n        }\\n    }\\n\\n    /// This function is useful for on-chain keepers. Deposit function should only be called if `_reqUpkeep` is true-\\n    /// let whatever be the address of the `_depositToken`.\\n    /// @dev Function which checks if deposit function can be called or not.\\n    /// @param _dHedgePool Struct containing details regarding the pool and various tokens in it.\\n    /// @return _depositToken Address of an underlying token.\\n    function requireUpkeep(dHedgeStorage.dHedgePool storage _dHedgePool)\\n        external\\n        view\\n        returns (address _depositToken)\\n    {\\n        // Only if the core contract is active should upkeep really be possible.\\n        if (_dHedgePool.isActive) {\\n            IPoolLogic _poolLogic = IPoolLogic(_dHedgePool.poolLogic);\\n            IPoolManagerLogic _supportLogic = IPoolManagerLogic(\\n                _poolLogic.poolManagerLogic()\\n            );\\n\\n            // Get assets currently supported by the dHEDGE pool. This is an optimised way-\\n            // of figuring out which tokens need to be deposited into the dHEDGE pool since the-\\n            // number of assets supported as deposit assets will generally be less than the variety-\\n            // of assets being streamed to the core contract of that pool.\\n            address[] memory _depositAssets = _supportLogic.getDepositAssets();\\n\\n            for (uint8 i = 0; i < _depositAssets.length; ++i) {\\n                _depositToken = _depositAssets[i];\\n                dHedgeStorage.TokenData storage tokenData = _dHedgePool\\n                    .tokenData[_depositToken];\\n\\n                if (\\n                    _checkUpkeep(\\n                        tokenData,\\n                        _depositToken,\\n                        _dHedgePool.lastDepositAt\\n                    )\\n                ) return (_depositToken);\\n            }\\n        }\\n\\n        return (address(0));\\n    }\\n\\n    /// Function which checks for all the conditions to be satisfied for an upkeep task.\\n    /// @param _tokenData Struct containing all the relevant details for a deposit token.\\n    /// @param _depositToken Address of the token to be deposited into the dHEDGE pool.\\n    /// @param _poolLastDepositAt Timestamp of the dHEDGE pool's last deposit from the core contract.\\n    /// @return Boolean stating whether token deposit is required.\\n    function _checkUpkeep(\\n        dHedgeStorage.TokenData storage _tokenData,\\n        address _depositToken,\\n        uint64 _poolLastDepositAt\\n    ) private view returns (bool) {\\n        uint256 _depositCycleDelay = block.timestamp - _poolLastDepositAt;\\n\\n        // If supertoken for an underlying token exists then proceed with the deposit and,\\n        // one of the permanent indices is active and,\\n        // if there is a delay of 15 minutes or more between two token deposits, we stop the cycle-\\n        // until 24 hours have been passed from the last deposit.\\n        // if it's been more than or equal to 24 hours since last deposit of the underlying token then,\\n        // upkeep (deposit to the dHEDGE pool) is necessary.\\n        if (\\n            (address(_tokenData.superToken) != address(0)) &&\\n            (_tokenData.permDistIndex1.isActive ||\\n                _tokenData.permDistIndex2.isActive) &&\\n            (_depositCycleDelay < 15 minutes ||\\n                _depositCycleDelay >= 24 hours) &&\\n            (block.timestamp -\\n                uint64(\\n                    (_tokenData.permDistIndex1.lastDepositAt >\\n                        _tokenData.permDistIndex2.lastDepositAt)\\n                        ? _tokenData.permDistIndex1.lastDepositAt\\n                        : _tokenData.permDistIndex2.lastDepositAt\\n                )) >=\\n            24 hours\\n        ) {\\n            // Calculate how much balance is there for the deposit. Since supertokens have 18 decimals-\\n            // and their underlying tokens can have decimals less than 18, some amount will always be left inside-\\n            // the core contract (dust amount). This amount can't be deposited into the dHEDGE pool and thus,\\n            // this function should return false in such cases.\\n            uint256 _depositBalance = _tokenData.superToken.balanceOf(\\n                address(this)\\n            ) / (10**(18 - IERC20Mod(_depositToken).decimals()));\\n\\n            if (_depositBalance > 0) return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /// Function to calculate uninvested amount of a user to return that after stream updation/termination.\\n    /// @param _dHedgePool Struct containing details regarding the pool and various tokens in it.\\n    /// @param _user Address of the user whose uninvested amount has to be calculated.\\n    /// @param _depositToken Address of the underlying token (deposit token and not the supertoken).\\n    /// @return Amount representing user's uninvested amount.\\n    function calcUserUninvested(\\n        dHedgeStorage.dHedgePool storage _dHedgePool,\\n        address _user,\\n        address _depositToken\\n    ) public view returns (uint256) {\\n        dHedgeStorage.TokenData storage tokenData = _dHedgePool.tokenData[\\n            _depositToken\\n        ];\\n\\n        return\\n            tokenData.superToken.calcUserUninvested(\\n                _user,\\n                (tokenData.assignedIndex[_user] ==\\n                    tokenData.permDistIndex1.indexId)\\n                    ? tokenData.permDistIndex1.lastDepositAt\\n                    : tokenData.permDistIndex2.lastDepositAt\\n            );\\n    }\\n\\n    /// Wrapper function to check if an asset is accepted as deposit asset in a dHedge pool.\\n    /// @param _dHedgePool Struct containing details regarding the pool and various tokens in it.\\n    /// @param _token Address of the underlying token to be deposited.\\n    /// @return Boolean representing the status of the token for deposition.\\n    function isDepositAsset(\\n        dHedgeStorage.dHedgePool storage _dHedgePool,\\n        address _token\\n    ) public view returns (bool) {\\n        IPoolLogic _poolLogic = IPoolLogic(_dHedgePool.poolLogic);\\n        IPoolManagerLogic _supportLogic = IPoolManagerLogic(\\n            _poolLogic.poolManagerLogic()\\n        );\\n\\n        return _supportLogic.isDepositAsset(_token);\\n    }\\n\\n    /// Function containing logic for collecting upfront fee.\\n    /// A upfront fee needs to be collected in order to maintain the same distribution unit price for a deposit cycle-\\n    /// for all streamers. For example, a person starting a stream of $10/day soon after a deposit gets the same-\\n    /// number of units as another person starting a stream with the same rate but just before the next deposit.\\n    /// However, the second person streamed a lot less than the first person and hence shouldn't get the same-\\n    /// amount of DHPTx as the first one.\\n    /// @param _superToken Address of the supertoken that the user is streaming or wants to stream.\\n    /// @param _sender Address of the user creating/updating/terminating the stream.\\n    /// @param _lastDepositAt Timestamp corresponding to the latest deposition of the underlying token into the-\\n    /// dHEGDE pool.\\n    /// @param _userUninvested Amount of supertokens corresponding to the user which are present in the core contract.\\n    function _transferBuffer(\\n        ISuperToken _superToken,\\n        address _sender,\\n        uint64 _lastDepositAt,\\n        uint256 _userUninvested\\n    ) private {\\n        (, int96 _flowRate) = _superToken.getFlow(_sender);\\n\\n        assert(_userUninvested <= _superToken.balanceOf(address(this)));\\n\\n        // Calculate how much amount needs to be deposited upfront.\\n        uint256 _depositAmount = (block.timestamp - _lastDepositAt) *\\n            uint256(uint96(_flowRate));\\n\\n        bool _success;\\n\\n        // If amount to be deposited is greater than user's uninvested amount then,\\n        // transfer the difference from the user.\\n        if (_depositAmount > _userUninvested) {\\n            uint256 _amount = _depositAmount - _userUninvested;\\n\\n            // console.log(\\\"Amount to be transferred from: \\\", _amount);\\n\\n            _success = _superToken.transferFrom(\\n                _sender,\\n                address(this),\\n                _amount\\n            );\\n\\n            emit UpfrontFeeDeposited(_superToken, _sender, _amount);\\n        } else if (_depositAmount < _userUninvested) {\\n            // Else if the amount to be deposited is lesser than the uninvested amount, transfer-\\n            // the difference to the user.\\n            uint256 _amount = _userUninvested - _depositAmount;\\n\\n            // console.log(\\\"Amount to be transferred to: \\\", _amount);\\n\\n            _success = _superToken.transfer(_sender, _amount);\\n\\n            emit UpfrontFeeReturned(_superToken, _sender, _amount);\\n        } else {\\n            // If `_depositAmount == _userUninvested` then technically no transfer should take place.\\n            // This case can be reached for the very first streamer of a new supertoken.\\n            _success = true;\\n        }\\n\\n        require(_success, \\\"dHedgeHelper: Buffer transfer failed\\\");\\n    }\\n\\n    /// Function containing the logic to make a deposit into the dHEDGE pool.\\n    /// @param _tokenData Struct containing all the relevant details for a deposit token.\\n    /// @param _depositToken Address of the underlying token (deposit token and not the supertoken).\\n    /// @param _factory Address of the core factory contract.\\n    /// @param _poolLogic Address of the dHEDGE pool into which deposition should happen.\\n    function _deposit(\\n        dHedgeStorage.TokenData storage _tokenData,\\n        address _depositToken,\\n        IdHedgeCoreFactory _factory,\\n        IPoolLogic _poolLogic\\n    ) private {\\n        uint256 _depositBalance = IERC20Mod(_depositToken).balanceOf(\\n            address(this)\\n        );\\n\\n        // Perform deposit transaction iff amount of underlying tokens is greater than 0.\\n        /// @dev It may be possible that this check is useless as we are checking for-\\n        /// `_downgradeAmount > 0` in `deposit`.\\n        if (_depositBalance > 0) {\\n            // Calculate fee to be collected.\\n            uint256 _feeCollected = (_depositBalance *\\n                _factory.defaultFeeRate()) / 1e6;\\n\\n            _depositBalance -= _feeCollected;\\n            \\n            // Transfer the fees collected for the owner only if it's greater than 0.\\n            // This condition won't be satisfied in case `defaultFeeRate` is set as 0.\\n            if (_feeCollected > 0) {\\n                IERC20(_depositToken).safeTransfer(\\n                    IdHedgeCoreFactory(_factory).dao(),\\n                    _feeCollected\\n                );\\n            }\\n\\n            // Deposit the tokens into the dHedge pool.\\n            uint256 _liquidityMinted = _poolLogic.deposit(\\n                _depositToken,\\n                _depositBalance\\n            );\\n\\n            // console.log(\\n            //     \\\"Token: %s; Amount: %s, DHPT: %s\\\",\\n            //     _depositToken,\\n            //     _depositBalance,\\n            //     _liquidityMinted\\n            // );\\n\\n            // Update the amount to be distributed.\\n            _tokenData.distAmount = _liquidityMinted;\\n\\n            emit TokenDeposited(\\n                _depositToken,\\n                _depositBalance,\\n                _liquidityMinted\\n            );\\n        }\\n    }\\n\\n    /// Function to migrate user's units from one index to another.\\n    /// The reason we need to migrate user's units is that since DHPT minted in a cycle is locked for 24 hours,\\n    /// is a user updates/terminates their ongoing stream then it's not possible to distribute their share of-\\n    /// DHPT from the previous cycle. To avoid this, we create a temporary index and assign the same amount of-\\n    /// units as they had before. We also set aside the portion of DHPT they would receive in order for that-\\n    /// amount to be distributed using the temporary index. Finally, if user had updated their stream, we assign-\\n    /// new units in the active index. Index migration should only happen if one of the permanent indices is locked-\\n    /// as this is a costly process.\\n    /// @param _tokenData Struct containing all the relevant details for a deposit token.\\n    /// @param _DHPTx Address of the supertoken corresponding to the DHPT of the dHEDGE pool.\\n    /// @param _sender Address of the user for whom index migration is necessary.\\n    /// @param _ctx Superfluid context object.\\n    function _migrateIndex(\\n        dHedgeStorage.TokenData storage _tokenData,\\n        ISuperToken _DHPTx,\\n        address _sender,\\n        bytes memory _ctx\\n    ) private returns (bytes memory _newCtx) {\\n        // console.log(\\\"Index migration begun\\\");\\n\\n        _newCtx = _ctx;\\n        uint32 _lockedIndexId = _tokenData.lockedIndexId;\\n\\n        // Index migration is done by deleting a sender's subscription in the locked index\\n        // and assigning new units in the active index along with assigning new units in temporary\\n        // index.\\n        (uint128 _totalUnits, uint128 _userUnits) = _getUnits(\\n            _DHPTx,\\n            _lockedIndexId,\\n            _sender\\n        );\\n\\n        uint256 _tempDistAmount = _tokenData.tempDistAmount;\\n\\n        // Calculating a user's pending locked tokens amount by using units issued to the user,\\n        // total units issued and total amount of DHPT in this contract (this is the locked amount)\\n        _tempDistAmount += ((_userUnits *\\n            (_tokenData.distAmount - _tempDistAmount)) / _totalUnits);\\n\\n        _tokenData.tempDistAmount = _tempDistAmount;\\n\\n        // console.log(\\n        //     \\\"Temp dist amount in migration: %s\\\",\\n        //     _tokenData.tempDistAmount\\n        // );\\n\\n        // Check if the total units of the locked index is equal to only the user's units.\\n        // We will have to make this index inactive if the condition is true.\\n        if (_totalUnits == _userUnits) {\\n            if (_lockedIndexId == _tokenData.permDistIndex1.indexId) {\\n                _tokenData.permDistIndex1.isActive = false;\\n                delete _tokenData.permDistIndex1.lastDepositAt;\\n            } else {\\n                _tokenData.permDistIndex2.isActive = false;\\n                delete _tokenData.permDistIndex2.lastDepositAt;\\n            }\\n        }\\n\\n        // Deleting units of the user in locked index\\n        _newCtx = _DHPTx.deleteSubscriptionInCallback(_lockedIndexId, _newCtx);\\n\\n        // console.log(\\\"Subscription deleted from index: %s\\\", _lockedIndexId);\\n\\n        // Assigning units in temporary index\\n        _newCtx = _DHPTx.updateSharesInCallback(\\n            _tokenData.tempDistIndex,\\n            _userUnits,\\n            _newCtx\\n        );\\n\\n        // console.log(\\\"Reached after share update\\\");\\n    }\\n\\n    /// Function to initialise an index.\\n    /// An index is made inactive in case there are no subscribers. It may happen that a new subscriber-\\n    /// is to be issued units in an inactive index. In such a case, this function needs to be called.\\n    /// @param _tokenData Struct containing all the relevant details for a deposit token.\\n    /// @param _index ID of the index to be initialised.\\n    function _initIndex(\\n        dHedgeStorage.TokenData storage _tokenData,\\n        uint32 _index\\n    ) private {\\n        if (\\n            _index == _tokenData.permDistIndex1.indexId &&\\n            !_tokenData.permDistIndex1.isActive\\n        ) {\\n            _tokenData.permDistIndex1.isActive = true;\\n            _tokenData.permDistIndex1.lastDepositAt = uint64(block.timestamp);\\n        } else if (\\n            _index == _tokenData.permDistIndex2.indexId &&\\n            !_tokenData.permDistIndex2.isActive\\n        ) {\\n            _tokenData.permDistIndex2.isActive = true;\\n            _tokenData.permDistIndex2.lastDepositAt = uint64(block.timestamp);\\n        }\\n    }\\n\\n    /// Function containing actual logic to distribute DHPTx.\\n    /// This function not only distributes DHPTx but also creates a new temporary index-\\n    /// if any units were assigned in that index. A new temporary index is necessary as-\\n    /// old units can still linger which shouldn't. As batch deletion/updation of units isn't possible-\\n    /// on chain, a new index creation is the only way to go.\\n    /// @param _dHedgePool Struct containing details regarding the pool and various tokens in it.\\n    /// @param _tokenData Struct containing all the relevant details for a deposit token.\\n    /// @param _DHPTx Address of the supertoken corresponding to the DHPT of the dHEDGE pool.\\n    /// @param _permDistIndex ID of the permanent distribution index which contains the locked DHPT-\\n    /// and need distribution.\\n    /// @param _tempDistIndex ID of the temporary distribution index which may contain locked DHPT.\\n    function _distribute(\\n        dHedgeStorage.dHedgePool storage _dHedgePool,\\n        dHedgeStorage.TokenData storage _tokenData,\\n        ISuperToken _DHPTx,\\n        uint32 _permDistIndex,\\n        uint32 _tempDistIndex\\n    ) private {\\n        uint256 _totalDistAmount = _tokenData.distAmount;\\n        uint256 _tempDistAmount = _tokenData.tempDistAmount;\\n\\n        // console.log(\\n        //     \\\"Dist amount: %s, Temp amount: %s\\\",\\n        //     _totalDistAmount,\\n        //     _tempDistAmount\\n        // );\\n\\n        // Actual distribution amount corresponding to the permanent distribution index is-\\n        // the difference of total distribution amount and temporary index's distribution amount.\\n        uint256 _actualPermDistAmount = _totalDistAmount - _tempDistAmount;\\n\\n        delete _tokenData.distAmount;\\n\\n        // If actual permanent distribution amount is greater than 0 only then initiate a distribution-\\n        // corresponding to the permanent distribution index. This condition will not be satisfied in case-\\n        /// everyone subscribed to that index either updates or terminates their stream when that index was locked.\\n        if (_actualPermDistAmount != 0) {\\n            // console.log(\\\"Perm dist index: %s\\\", _permDistIndex);\\n            _DHPTx.distribute(_permDistIndex, _actualPermDistAmount);\\n        }\\n\\n        // Only if there are any tokens to be distributed using temporary distribution index-\\n        // should we initiate a distribution and create a new temporary index.\\n        if (_tempDistAmount != 0) {\\n            // console.log(\\\"Temporary dist index: %s\\\", _tempDistIndex);\\n\\n            delete _tokenData.tempDistAmount;\\n\\n            _DHPTx.distribute(_tempDistIndex, _tempDistAmount);\\n\\n            // Initiate new temporary index creation.\\n            _createTempIndex(_dHedgePool, _tokenData, _DHPTx);\\n        }\\n    }\\n\\n    /// Function which creates a new temporary index.\\n    /// @param _dHedgePool Struct containing details regarding the pool and various tokens in it.\\n    /// @param _tokenData Struct containing all the relevant details for a deposit token.\\n    /// @param _DHPTx Address of the supertoken corresponding to the DHPT of the dHEDGE pool.\\n    function _createTempIndex(\\n        dHedgeStorage.dHedgePool storage _dHedgePool,\\n        dHedgeStorage.TokenData storage _tokenData,\\n        ISuperToken _DHPTx\\n    ) private {\\n        uint32 _latestDistIndex = _dHedgePool.latestDistIndex;\\n\\n        // Create new temporary index.\\n        _DHPTx.createIndex(_latestDistIndex);\\n\\n        // Store the index Id of the temporary index.\\n        _tokenData.tempDistIndex = _latestDistIndex;\\n\\n        // Increase total indices count.\\n        ++_dHedgePool.latestDistIndex;\\n\\n        // console.log(\\\"Created new temp index: %s\\\", _latestDistIndex);\\n    }\\n\\n    /// Function to upgrade DHPT to DHPTx.\\n    /// This function only upgrades DHPT to DHPTx in case there is some amount of DHPT (of course \\ud83d\\ude42),\\n    /// and if DHPT is unlocked or cooldown period is inactive. Otherwise, does nothing.\\n    /// @param _poolLogic Address of the dHEDGE pool into which deposition should happen.\\n    /// @param _DHPTx Address of the supertoken corresponding to the DHPT of the dHEDGE pool.\\n    function _upgradeDHPTx(IPoolLogic _poolLogic, ISuperToken _DHPTx) private {\\n        uint256 _underlyingTokenBalance = IERC20Mod(address(_poolLogic))\\n            .balanceOf(address(this));\\n\\n        if (\\n            _poolLogic.getExitRemainingCooldown(address(this)) == 0 &&\\n            _underlyingTokenBalance > 0\\n        ) {\\n            _DHPTx.upgrade(_underlyingTokenBalance);\\n        }\\n    }\\n\\n    /// Function to calculate total units of an index ID and a user's unit amount in that index.\\n    /// @param _DHPTx Address of the supertoken corresponding to the DHPT of the dHEDGE pool.\\n    /// @param _indexId ID of the index for which calculations need to be done.\\n    /// @param _sender Address of the user for whom amount of units in that index needs to be fetched.\\n    /// @return Total number of units in the index.\\n    /// @return User's units in the index.\\n    function _getUnits(\\n        ISuperToken _DHPTx,\\n        uint32 _indexId,\\n        address _sender\\n    ) private view returns (uint128, uint128) {\\n        (, , uint128 _userUnits, ) = _DHPTx.getSubscription(_indexId, _sender);\\n\\n        (\\n            ,\\n            ,\\n            uint128 _totalIndexApprovedUnits,\\n            uint128 _totalIndexPendingUnits\\n        ) = _DHPTx.getIndex(_indexId);\\n\\n        // Total number of units is equal to total number of approved units plus total number of pending units.\\n        return (_totalIndexApprovedUnits + _totalIndexPendingUnits, _userUnits);\\n    }\\n\\n    /// Function which fetches amount of underlying tokens to be deposited into the dHEDGE pool.\\n    /// As there are two permanent indices, it's necessary to deposit amount of tokens corresponding-\\n    /// to any one index and not both.\\n    /// @param _DHPTx Address of the supertoken corresponding to the DHPT of the dHEDGE pool.\\n    /// @param _currDistIndex Index for which the deposit amount is needed to be calculated.\\n    /// @param _permDistIndex1 Index ID of the first permanent index.\\n    /// @param _permDistIndex2 Index ID of the second permanent index.\\n    /// @param _superTokenBalance Amount of supertoken already in the core contract.\\n    function _getSuperTokenDepositBalance(\\n        ISuperToken _DHPTx,\\n        uint32 _currDistIndex,\\n        uint32 _permDistIndex1,\\n        uint32 _permDistIndex2,\\n        uint256 _superTokenBalance\\n    ) private view returns (uint256) {\\n        // Calculate and downgrade amount necessary for deposition in dHEDGE pool.\\n        (\\n            ,\\n            ,\\n            uint128 _totalIndexApprovedUnits1,\\n            uint128 _totalIndexPendingUnits1\\n        ) = _DHPTx.getIndex(_permDistIndex1);\\n\\n        (\\n            ,\\n            ,\\n            uint128 _totalIndexApprovedUnits2,\\n            uint128 _totalIndexPendingUnits2\\n        ) = _DHPTx.getIndex(_permDistIndex2);\\n\\n        uint128 _totalIndexUnits1 = _totalIndexApprovedUnits1 +\\n            _totalIndexPendingUnits1;\\n\\n        uint128 _totalIndexUnits2 = _totalIndexApprovedUnits2 +\\n            _totalIndexPendingUnits2;\\n\\n        // console.log(\\n        //     \\\"Total index units 1 and 2: %s, %s\\\",\\n        //     _totalIndexUnits1,\\n        //     _totalIndexUnits2\\n        // );\\n\\n        return\\n            ((\\n                (_currDistIndex == _permDistIndex1)\\n                    ? _totalIndexUnits1\\n                    : _totalIndexUnits2\\n            ) * _superTokenBalance) / (_totalIndexUnits1 + _totalIndexUnits2);\\n    }\\n}\\n\",\"keccak256\":\"0x539b13428715d0f28413322c0c88dfb0f56d57731b215743021c6313c96bebe1\",\"license\":\"Unlicensed\"},\"contracts/dHedge-Factory-Version/Libraries/dHedgeStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.10;\\n\\nimport { ISuperfluid, ISuperToken, ISuperApp, ISuperAgreement, SuperAppDefinitions } from \\\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\\\";\\nimport { IConstantFlowAgreementV1 } from \\\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol\\\";\\nimport { IInstantDistributionAgreementV1 } from \\\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IInstantDistributionAgreementV1.sol\\\";\\n\\n/**\\n * @title dHedge storage library.\\n * @author rashtrakoff <rashtrakoff@pm.me>\\n * @dev Contains a struct which defines a dHedge pool for a core contract.\\n * @custom:experimental This is an experimental contract/library. Use at your own risk.\\n */\\n// solhint-disable contract-name-camelcase\\n// solhint-disable var-name-mixedcase\\nlibrary dHedgeStorage {\\n    /// Struct containing details of a permanent index.\\n    /// @param isActive Indicates whether this index is active or not.\\n    /// @param indexId ID of the distribution index.\\n    struct PermIndexData {\\n        bool isActive;\\n        uint64 lastDepositAt;\\n        uint32 indexId;\\n    }\\n\\n    /// Struct containing all the necessary data related to a underlying token market.\\n    /// @param superToken Contains supported supertoken of an underlying token.\\n    /// @param permDistIndex1 First primary/permanent IDA distribution index with respect to an underlying token.\\n    /// @param permDistIndex2 Second primary/permanent IDA distribution index with respect to an underlying token.\\n    /// @param tempDistIndex Temporary IDA distribution index with respect to an underlying token.\\n    /// @param lockedIndexId Index ID of the locked index.\\n    /// @param distAmount DHPT amount to be distributed.\\n    /// @param lastDepositAt Latest timestamp of when this underlying token was deposited into a dHEDGE pool.\\n    /// @param assignedIndex A user's assigned index id. A user can be assigned to one of the two permanent- \\n    /// indices only.\\n    struct TokenData {\\n        ISuperToken superToken;\\n        PermIndexData permDistIndex1;\\n        PermIndexData permDistIndex2;\\n        uint32 tempDistIndex;\\n        uint32 lockedIndexId;\\n        uint256 distAmount;\\n        uint256 tempDistAmount;\\n        mapping(address => uint32) assignedIndex;\\n    }\\n\\n    /// Struct containing data related to a dHEDGE pool and it's corresponding core contract.\\n    /// @param isActive Status of contract representing a dHEDGE pool.\\n    /// @param DHPTx DHP super token for a dHEDGE pool.\\n    /// @param factory Factory contract which deployed the core contract.\\n    /// @param poolLogic Address of a dHEDGE pool.\\n    /// @param latestDistIndex Latest index created for distributing DHPTx according to a deposit token stream rate-\\n    /// of a user.\\n    /// @param lastDepositAt Latest timestamp of when any underlying token was deposited into a dHEDGE pool.\\n    /// @param tokenData Contains data regarding a market/deposit token.\\n    struct dHedgePool {\\n        bool isActive;\\n        ISuperToken DHPTx;\\n        address factory;\\n        address poolLogic;\\n        uint32 latestDistIndex;\\n        uint64 lastDepositAt;\\n        mapping(address => TokenData) tokenData;\\n    }\\n}\\n\",\"keccak256\":\"0x7f1bfb4f7c43f40e178b3014e9466b711612215c438da30ed1505a5180160b23\",\"license\":\"Unlicensed\"},\"contracts/dHedge-Factory-Version/dHedgeCore.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.10;\\n\\nimport { ISuperfluid, ISuperToken, ISuperAgreement, SuperAppDefinitions } from \\\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\\\";\\nimport { IConstantFlowAgreementV1 } from \\\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol\\\";\\nimport { IInstantDistributionAgreementV1 } from \\\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IInstantDistributionAgreementV1.sol\\\";\\nimport { SuperAppBase } from \\\"@superfluid-finance/ethereum-contracts/contracts/apps/SuperAppBase.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./Libraries/dHedgeHelper.sol\\\";\\nimport \\\"./Libraries/dHedgeStorage.sol\\\";\\nimport \\\"./Interfaces/IdHedgeCore.sol\\\";\\nimport \\\"./Interfaces/IdHedgeCoreFactory.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title Core contract for streaming into a dHedge pool.\\n * @author rashtrakoff <rashtrakoff@pm.me>.\\n * @notice Contains user facing functions.\\n * @custom:experimental This is an experimental contract/library. Use at your own risk.\\n */\\n\\n// solhint-disable not-rely-on-time\\n// solhint-disable reason-string\\n// solhint-disable var-name-mixedcase\\n// solhint-disable-next-line contract-name-camelcase\\ncontract dHedgeCore is Initializable, SuperAppBase, IdHedgeCore {\\n    using SafeERC20 for IERC20;\\n    using dHedgeHelper for dHedgeStorage.dHedgePool;\\n    using SFHelper for ISuperToken;\\n\\n    // Struct containing all the relevant data regarding the dHedgePool this dHedgeCore serves.\\n    dHedgeStorage.dHedgePool private poolData;\\n\\n    /// @dev Initialize the factory.\\n    /// @param _dHedgePool dHEDGE pool contract address.\\n    /// @param _DHPTx Supertoken corresponding to the DHPT of the pool\\n    function initialize(address _dHedgePool, ISuperToken _DHPTx)\\n        external\\n        initializer\\n    {\\n        poolData.isActive = true;\\n        poolData.factory = msg.sender;\\n        poolData.DHPTx = _DHPTx;\\n        poolData.poolLogic = _dHedgePool;\\n        poolData.latestDistIndex = 1;\\n\\n        IERC20(_dHedgePool).safeIncreaseAllowance(\\n            address(_DHPTx),\\n            type(uint256).max\\n        );\\n    }\\n\\n    /**************************************************************************\\n     * Core functions\\n     *************************************************************************/\\n\\n    /// Initialises an underlying token and it's supertoken for streaming into dHEDGE pool.\\n    /// @param _superToken Supertoken of the underlying token we wish to stream.\\n    function initStreamToken(ISuperToken _superToken) external {\\n        _onlyActive();\\n        _onlyOwner(msg.sender);\\n        poolData.initStreamToken(_superToken);\\n    }\\n\\n    /// Converts supertokens to underlying tokens and deposits them into dHedge pool.\\n    /// @param _token Address of the underlying token to be deposited into dHedge pool.\\n    function dHedgeDeposit(address _token) external override {\\n        _onlyActive();\\n        poolData.deposit(_token);\\n    }\\n\\n    /// Distributes the DHPTx corresponding to a underlying token's deposits.\\n    /// @param _token Address of the underlying token.\\n    function distribute(address _token) external {\\n        _onlyActive();\\n        poolData.distribute(_token);\\n    }\\n\\n    /// Function to withdraw a token in case of emergency.\\n    /// @param _token Address of the pool token.\\n    /// TODO Remove/Modify this function after testing\\n    function emergencyWithdraw(address _token) external {\\n        _onlyOwner(msg.sender);\\n        IERC20(_token).safeTransfer(\\n            IdHedgeCoreFactory(poolData.factory).dao(),\\n            IERC20(_token).balanceOf(address(this))\\n        );\\n\\n        emit EmergencyWithdraw(_token);\\n    }\\n\\n    /// Deactivates a dHedgeCore contract.\\n    /// @param _message Message reason for reactivation of the core.\\n    function deactivateCore(string calldata _message) external {\\n        _onlyOwner(msg.sender);\\n        _onlyActive();\\n\\n        poolData.isActive = false;\\n\\n        emit CoreDeactivated(_message);\\n    }\\n\\n    /// Reactivates a dHedgeCore contract.\\n    /// @param _message Message reason for reactivation of the core.\\n    function reactivateCore(string calldata _message) external {\\n        _onlyOwner(msg.sender);\\n        require(!poolData.isActive, \\\"dHedgeCore: Pool already active\\\");\\n\\n        poolData.isActive = true;\\n\\n        emit CoreReactivated(_message);\\n    }\\n\\n    /// Closes a supertoken stream if core is jailed or user is running low on balance.\\n    /// Any user's stream can be closed by anyone provided the app is jailed-\\n    /// or user doesn't have enough amount to stream for more than 12 hours.\\n    /// @param _superToken Supertoken being streamed.\\n    /// @param _user Address of the user whose stream needs to be closed.\\n    function emergencyCloseStream(ISuperToken _superToken, address _user)\\n        external\\n        override\\n    {\\n        _superToken.emergencyCloseStream(_user);\\n    }\\n\\n    /// Checks if the core is active or not.\\n    /// @return Boolean indicating working status of core.\\n    function checkCoreActive() external view override returns (bool) {\\n        return poolData.isActive;\\n    }\\n\\n    // /// Gets the latest distribution index created.\\n    // /// This function can also be used to get number of tokens supported by this dHedgeCore.\\n    // /// @return Number corresponding to the latest created index.\\n    // function getLatestDistIndex() external view override returns (uint32) {\\n    //     return poolData.latestDistIndex;\\n    // }\\n\\n    /// Gets the distribution indices corresponding to an underlying token.\\n    /// @param _token Address of a deposit token.\\n    /// @return Index ID of first permanent index.\\n    /// @return Index ID of second permanent index.\\n    /// @return Index ID of temporary index.\\n    /// @return Index ID of the locked index.\\n    function getTokenDistIndices(address _token)\\n        external\\n        view\\n        override\\n        returns (\\n            uint32,\\n            uint32,\\n            uint32,\\n            uint32\\n        )\\n    {\\n        dHedgeStorage.TokenData storage tokenData = poolData.tokenData[_token];\\n        if (address(tokenData.superToken) != address(0))\\n            return (\\n                tokenData.permDistIndex1.indexId,\\n                tokenData.permDistIndex2.indexId,\\n                tokenData.tempDistIndex,\\n                tokenData.lockedIndexId\\n            );\\n\\n        return (0, 0, 0, 0);\\n    }\\n    \\n    /// Gets a user's assigned permanent distribution index for a supertoken stream.\\n    /// @param _user Address of the user.\\n    /// @param _token Address of the underlying token for which the permanent distribution index ID is required.\\n    /// @return Assigned permanent distribution index ID.\\n    function getUserDistIndex(address _user, address _token)\\n        external\\n        view\\n        returns (uint32)\\n    {\\n        return poolData.tokenData[_token].assignedIndex[_user];\\n    }\\n\\n    /// Calculates uninvested token amount of a particular user.\\n    /// @param _user Address of the user whose uninvested amount needs to be calculated.\\n    /// @param _token Address of the underlying token.\\n    /// @return Amount of uninvested tokens.\\n    function calcUserUninvested(address _user, address _token)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return poolData.calcUserUninvested(_user, _token);\\n    }\\n\\n    /// Checks if deposit action can be performed.\\n    /// @return Address of the underlying/deposit token which needs to be deposited to the dHedge pool.\\n    function requireUpkeep() public view override returns (address) {\\n        return poolData.requireUpkeep();\\n    }\\n\\n    /// Checks status of the core and reverts if inactive.\\n    function _onlyActive() internal view {\\n        require(poolData.isActive, \\\"dHedgeCore: Pool inactive\\\");\\n    }\\n\\n    /// Equivalent to onlyOwner modifier.\\n    /// @param _user Address of the user claiming to be the owner.\\n    function _onlyOwner(address _user) internal view {\\n        require(\\n            _user == Ownable(poolData.factory).owner(),\\n            \\\"dHedgeCore: Not the owner\\\"\\n        );\\n    }\\n\\n    /**************************************************************************\\n     * SuperApp callbacks\\n     *************************************************************************/\\n    \\n    /// @dev TODO Check if `_onlyExpected` is even required.\\n    function beforeAgreementCreated(\\n        ISuperToken _superToken,\\n        address, /*_agreementClass*/\\n        bytes32, /*agreementId*/\\n        bytes calldata, /*agreementData*/\\n        bytes calldata // _ctx\\n    ) external view override returns (bytes memory _cbdata) {\\n        SFHelper._onlyHost();\\n        // SFHelper._onlyExpected(_agreementClass);\\n        _onlyActive();\\n\\n        address _underlyingToken = _superToken.getUnderlyingToken();\\n        ISuperToken _superStreamToken = poolData\\n            .tokenData[_underlyingToken]\\n            .superToken;\\n\\n        require(\\n            _superStreamToken == _superToken,\\n            \\\"dHedgeCore: Supertoken not supported\\\"\\n        );\\n\\n        _cbdata = abi.encode(0);\\n    }\\n\\n    function afterAgreementCreated(\\n        ISuperToken _superToken,\\n        address _agreementClass,\\n        bytes32, // _agreementId,\\n        bytes calldata, // _agreementData,\\n        bytes calldata _cbdata,\\n        bytes calldata _ctx\\n    ) external override returns (bytes memory _newCtx) {\\n        SFHelper._onlyHost();\\n        // SFHelper._onlyExpected(_agreementClass);\\n        _newCtx = _ctx;\\n\\n        address _user = SFHelper.HOST.decodeCtx(_newCtx).msgSender;\\n\\n        _newCtx = poolData.afterAgreementCreated(\\n            _user,\\n            _agreementClass,\\n            _superToken.getUnderlyingToken(),\\n            _newCtx,\\n            _cbdata\\n        );\\n\\n        emit StreamModified(_superToken, _user);\\n    }\\n\\n    function beforeAgreementUpdated(\\n        ISuperToken _superToken,\\n        address _agreementClass,\\n        bytes32, /*agreementId*/\\n        bytes calldata, /*agreementData*/\\n        bytes calldata _ctx\\n    ) external view override returns (bytes memory _cbdata) {\\n        SFHelper._onlyHost();\\n        // SFHelper._onlyExpected(_agreementClass);\\n        _onlyActive();\\n\\n        _cbdata = poolData.beforeAgreement(\\n            _agreementClass,\\n            _superToken.getUnderlyingToken(),\\n            _ctx\\n        );\\n    }\\n\\n    function afterAgreementUpdated(\\n        ISuperToken _superToken,\\n        address _agreementClass,\\n        bytes32, //_agreementId,\\n        bytes calldata, //_agreementData,\\n        bytes calldata _cbdata, //_cbdata,\\n        bytes calldata _ctx\\n    ) external override returns (bytes memory _newCtx) {\\n        SFHelper._onlyHost();\\n        // SFHelper._onlyExpected(_agreementClass);\\n        _newCtx = _ctx;\\n\\n        address _user = SFHelper.HOST.decodeCtx(_newCtx).msgSender;\\n\\n        _newCtx = poolData.afterAgreementUpdated(\\n            _user,\\n            _agreementClass,\\n            _superToken.getUnderlyingToken(),\\n            _newCtx,\\n            _cbdata\\n        );\\n\\n        emit StreamModified(_superToken, _user);\\n    }\\n\\n    function beforeAgreementTerminated(\\n        ISuperToken _superToken,\\n        address _agreementClass,\\n        bytes32, /*agreementId*/\\n        bytes calldata, /*agreementData*/\\n        bytes calldata _ctx\\n    ) external view override returns (bytes memory _cbdata) {\\n        SFHelper._onlyHost();\\n\\n        try\\n            poolData.beforeAgreement(\\n                _agreementClass,\\n                _superToken.getUnderlyingToken(),\\n                _ctx\\n            )\\n        returns (bytes memory _newCbData) {\\n            _cbdata = _newCbData;\\n        } catch (bytes memory _error) {\\n            console.logBytes(_error);\\n            _cbdata = new bytes(0);\\n        }\\n    }\\n\\n    function afterAgreementTerminated(\\n        ISuperToken _superToken,\\n        address _agreementClass,\\n        bytes32, //_agreementId,\\n        bytes calldata, // _agreementData,\\n        bytes calldata _cbdata, //_cbdata,\\n        bytes calldata _ctx\\n    ) external override returns (bytes memory _newCtx) {\\n        SFHelper._onlyHost();\\n        _newCtx = _ctx;\\n\\n        address _user = SFHelper.HOST.decodeCtx(_newCtx).msgSender;\\n\\n        try\\n            poolData.afterAgreementTerminated(\\n                _user,\\n                _agreementClass,\\n                _superToken.getUnderlyingToken(),\\n                _newCtx,\\n                _cbdata\\n            )\\n        returns (bytes memory _modCtx) {\\n            _newCtx = _modCtx;\\n        } catch (bytes memory _error) {\\n            // console.log(\\\"Reverted\\\");\\n            console.logBytes(_error);\\n        }\\n\\n        emit StreamModified(_superToken, _user);\\n    }\\n}\\n\",\"keccak256\":\"0x4a3f3cf658855adbc75013f69efe42c9f1f83307cf3c02e82bdc67116aa72011\",\"license\":\"Unlicensed\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611e54806100206000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806363453ae1116100ad578063911f94e111610071578063911f94e114610291578063b805232f146102b2578063c43088ef146102c5578063d86ed3e514610308578063f1d640b01461031b57600080fd5b806363453ae1146101ec5780636ff1c9bc146101ff57806385fc009414610212578063884d1f401461026b5780638c415ec01461027e57600080fd5b8063525f45fb116100f4578063525f45fb1461018a57806353be974f1461019d57806353c11f99146101b3578063587d5ff5146101c65780635f9e7d77146101d957600080fd5b8063230dbd29146101265780632a79ac1f1461014f57806330d9c91514610164578063485cc95514610177575b600080fd5b61013961013436600461180f565b61033b565b6040516101469190611932565b60405180910390f35b61016261015d366004611945565b610541565b005b610139610172366004611962565b6105c8565b610162610185366004611a01565b6106ea565b610162610198366004611945565b610802565b60015460ff166040519015158152602001610146565b6101396101c136600461180f565b610851565b6101626101d4366004611a01565b610a79565b6101396101e7366004611962565b610af0565b6101626101fa366004611945565b610c3c565b61016261020d366004611945565b610c8b565b610256610220366004611a01565b6001600160a01b038082166000908152600460209081526040808320938616835260069093019052205463ffffffff1692915050565b60405163ffffffff9091168152602001610146565b610139610279366004611962565b610dbb565b61016261028c366004611a3a565b610ec1565b6102a461029f366004611a01565b610f67565b604051908152602001610146565b6101626102c0366004611a3a565b610ffc565b6102d86102d3366004611945565b611049565b6040805163ffffffff95861681529385166020850152918416918301919091529091166060820152608001610146565b61013961031636600461180f565b6110d1565b6103236111f4565b6040516001600160a01b039091168152602001610146565b6060610345611270565b82828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604051631fb6491d60e11b815294955093733e14dc1b13c488a8d5d310918780c983bd5982e79350633f6c923a92506103b591508590600401611932565b600060405180830381865afa1580156103d2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103fa9190810190611b7d565b606001519050600173B354eb06CD6d0E83F17c50d253A56CCdB91B9886635db184489091838d8f6001600160a01b031663ee719bc86040518163ffffffff1660e01b8152600401602060405180830381865afa15801561045e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104829190611c84565b878c8c6040518863ffffffff1660e01b81526004016104a79796959493929190611cca565b600060405180830381865af41580156104c4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104ec9190810190611d25565b604080516001600160a01b03808f168252841660208201529193507f4ec9f5b70e68d6ebc2f85d12348713d1fcae8e25ed8bf5a2a3cf02651cde30bf91015b60405180910390a1509998505050505050505050565b6105496112d5565b61055233611327565b604051630565a89d60e41b8152600160048201526001600160a01b038216602482015273B354eb06CD6d0E83F17c50d253A56CCdB91B98869063565a89d0906044015b60006040518083038186803b1580156105ad57600080fd5b505af41580156105c1573d6000803e3d6000fd5b5050505050565b60606105d2611270565b6105da6112d5565b6000886001600160a01b031663ee719bc86040518163ffffffff1660e01b8152600401602060405180830381865afa15801561061a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063e9190611c84565b6001600160a01b03808216600090815260046020526040902054919250908116908a1681146106c05760405162461bcd60e51b8152602060048201526024808201527f644865646765436f72653a205375706572746f6b656e206e6f7420737570706f6044820152631c9d195960e21b60648201526084015b60405180910390fd5b60408051600060208201520160405160208183030381529060405292505050979650505050505050565b600054610100900460ff1680610703575060005460ff16155b6107665760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106b7565b600054610100900460ff16158015610788576000805461ffff19166101011790555b60018054600280546001600160a01b031916331790556001600160a01b03848116610100026001600160a81b0319909216919091178217909155600380546001600160c01b031916918516918217600160a01b1790556107eb90836000196113f8565b80156107fd576000805461ff00191690555b505050565b61080a6112d5565b60405163394110d160e01b8152600160048201526001600160a01b038216602482015273B354eb06CD6d0E83F17c50d253A56CCdB91B98869063394110d190604401610595565b606061085b611270565b82828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604051631fb6491d60e11b815294955093733e14dc1b13c488a8d5d310918780c983bd5982e79350633f6c923a92506108cb91508590600401611932565b600060405180830381865afa1580156108e8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109109190810190611b7d565b606001519050600173B354eb06CD6d0E83F17c50d253A56CCdB91B9886631be212df9091838d8f6001600160a01b031663ee719bc86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610974573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109989190611c84565b878c8c6040518863ffffffff1660e01b81526004016109bd9796959493929190611cca565b600060405180830381865af49250505080156109fb57506040513d6000823e601f3d908101601f191682016040526109f89190810190611d25565b60015b6104ec573d808015610a29576040519150601f19603f3d011682016040523d82523d6000602084013e610a2e565b606091505b50610a38816114e3565b50604080516001600160a01b03808e168252831660208201527f4ec9f5b70e68d6ebc2f85d12348713d1fcae8e25ed8bf5a2a3cf02651cde30bf910161052b565b6040516302e65b1d60e21b81526001600160a01b0383811660048301528216602482015273fF666F7971C55A963a048AdDb46f0B85E445Fa9290630b996c749060440160006040518083038186803b158015610ad457600080fd5b505af4158015610ae8573d6000803e3d6000fd5b505050505050565b6060610afa611270565b600173B354eb06CD6d0E83F17c50d253A56CCdB91B9886635ac9370e9091898b6001600160a01b031663ee719bc86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7b9190611c84565b87876040518663ffffffff1660e01b8152600401610b9d959493929190611d5a565b600060405180830381865af4925050508015610bdb57506040513d6000823e601f3d908101601f19168201604052610bd89190810190611d25565b60015b610c2e573d808015610c09576040519150601f19603f3d011682016040523d82523d6000602084013e610c0e565b606091505b50610c18816114e3565b5050604080516000815260208101909152610c31565b90505b979650505050505050565b610c446112d5565b604051630399350760e11b8152600160048201526001600160a01b038216602482015273B354eb06CD6d0E83F17c50d253A56CCdB91B9886906307326a0e90604401610595565b610c9433611327565b60025460408051634162169f60e01b81529051610d7c926001600160a01b031691634162169f9160048083019260209291908290030181865afa158015610cdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d039190611c84565b6040516370a0823160e01b81523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa158015610d47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6b9190611d8d565b6001600160a01b0384169190611526565b6040516001600160a01b03821681527f5e7b34819cd91b239220bec92fcfd3c10da2214ba13e4e2b1f6c9cfdbd68a9a29060200160405180910390a150565b6060610dc5611270565b610dcd6112d5565b600173B354eb06CD6d0E83F17c50d253A56CCdB91B9886635ac9370e9091898b6001600160a01b031663ee719bc86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4e9190611c84565b87876040518663ffffffff1660e01b8152600401610e70959493929190611d5a565b600060405180830381865af4158015610e8d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610eb59190810190611d25565b98975050505050505050565b610eca33611327565b60015460ff1615610f1d5760405162461bcd60e51b815260206004820152601f60248201527f644865646765436f72653a20506f6f6c20616c7265616479206163746976650060448201526064016106b7565b6001805460ff1916811790556040517f32469476dd301d36094f41aeedb33e89a8dd0ba10ab692329a9cf271f232887990610f5b9084908490611da6565b60405180910390a15050565b604051631740215d60e01b8152600160048201526001600160a01b0380841660248301528216604482015260009073B354eb06CD6d0E83F17c50d253A56CCdB91B988690631740215d90606401602060405180830381865af4158015610fd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff59190611d8d565b9392505050565b61100533611327565b61100d6112d5565b6001805460ff191690556040517f52142d9924affdbcc443234e980cf63b22e87bbc4a88bb571b0cfd1e297edd2d90610f5b9084908490611da6565b6001600160a01b03808216600090815260046020526040812080549192839283928392909116156110ba576001810154600282015460039092015463ffffffff69010000000000000000009283900481169750919092048116945081811693506401000000009091041690506110ca565b6000806000809450945094509450505b9193509193565b60606110db611270565b82828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604051631fb6491d60e11b815294955093733e14dc1b13c488a8d5d310918780c983bd5982e79350633f6c923a925061114b91508590600401611932565b600060405180830381865afa158015611168573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111909190810190611b7d565b606001519050600173B354eb06CD6d0E83F17c50d253A56CCdB91B9886632b1737b19091838d8f6001600160a01b031663ee719bc86040518163ffffffff1660e01b8152600401602060405180830381865afa15801561045e573d6000803e3d6000fd5b60405163832a95fd60e01b81526001600482015260009073B354eb06CD6d0E83F17c50d253A56CCdB91B98869063832a95fd90602401602060405180830381865af4158015611247573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126b9190611c84565b905090565b33733e14dc1b13c488a8d5d310918780c983bd5982e7146112d35760405162461bcd60e51b815260206004820181905260248201527f534648656c7065723a20537570706f727473206f6e6c79206f6e6520686f737460448201526064016106b7565b565b60015460ff166112d35760405162461bcd60e51b815260206004820152601960248201527f644865646765436f72653a20506f6f6c20696e6163746976650000000000000060448201526064016106b7565b60025460408051638da5cb5b60e01b815290516001600160a01b0390921691638da5cb5b916004808201926020929091908290030181865afa158015611371573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113959190611c84565b6001600160a01b0316816001600160a01b0316146113f55760405162461bcd60e51b815260206004820152601960248201527f644865646765436f72653a204e6f7420746865206f776e65720000000000000060448201526064016106b7565b50565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015611449573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146d9190611d8d565b6114779190611dba565b6040516001600160a01b0385166024820152604481018290529091506114dd90859063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611556565b50505050565b6113f5816040516024016114f79190611932565b60408051601f198184030181529190526020810180516001600160e01b03166305f3bfab60e11b179052611628565b6040516001600160a01b0383166024820152604481018290526107fd90849063a9059cbb60e01b906064016114a6565b60006115ab826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166116499092919063ffffffff16565b8051909150156107fd57808060200190518101906115c99190611de0565b6107fd5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106b7565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b60606116588484600085611660565b949350505050565b6060824710156116c15760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106b7565b843b61170f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106b7565b600080866001600160a01b0316858760405161172b9190611e02565b60006040518083038185875af1925050503d8060008114611768576040519150601f19603f3d011682016040523d82523d6000602084013e61176d565b606091505b5091509150610c3182828660608315611787575081610ff5565b8251156117975782518084602001fd5b8160405162461bcd60e51b81526004016106b79190611932565b6001600160a01b03811681146113f557600080fd5b60008083601f8401126117d857600080fd5b50813567ffffffffffffffff8111156117f057600080fd5b60208301915083602082850101111561180857600080fd5b9250929050565b600080600080600080600080600060c08a8c03121561182d57600080fd5b8935611838816117b1565b985060208a0135611848816117b1565b975060408a0135965060608a013567ffffffffffffffff8082111561186c57600080fd5b6118788d838e016117c6565b909850965060808c013591508082111561189157600080fd5b61189d8d838e016117c6565b909650945060a08c01359150808211156118b657600080fd5b506118c38c828d016117c6565b915080935050809150509295985092959850929598565b60005b838110156118f55781810151838201526020016118dd565b838111156114dd5750506000910152565b6000815180845261191e8160208601602086016118da565b601f01601f19169290920160200192915050565b602081526000610ff56020830184611906565b60006020828403121561195757600080fd5b8135610ff5816117b1565b600080600080600080600060a0888a03121561197d57600080fd5b8735611988816117b1565b96506020880135611998816117b1565b955060408801359450606088013567ffffffffffffffff808211156119bc57600080fd5b6119c88b838c016117c6565b909650945060808a01359150808211156119e157600080fd5b506119ee8a828b016117c6565b989b979a50959850939692959293505050565b60008060408385031215611a1457600080fd5b8235611a1f816117b1565b91506020830135611a2f816117b1565b809150509250929050565b60008060208385031215611a4d57600080fd5b823567ffffffffffffffff811115611a6457600080fd5b611a70858286016117c6565b90969095509350505050565b634e487b7160e01b600052604160045260246000fd5b604051610160810167ffffffffffffffff81118282101715611ab657611ab6611a7c565b60405290565b805160ff81168114611acd57600080fd5b919050565b8051611acd816117b1565b80516001600160e01b031981168114611acd57600080fd5b600082601f830112611b0657600080fd5b815167ffffffffffffffff80821115611b2157611b21611a7c565b604051601f8301601f19908116603f01168101908282118183101715611b4957611b49611a7c565b81604052838152866020858801011115611b6257600080fd5b611b738460208301602089016118da565b9695505050505050565b600060208284031215611b8f57600080fd5b815167ffffffffffffffff80821115611ba757600080fd5b908301906101608286031215611bbc57600080fd5b611bc4611a92565b611bcd83611abc565b8152611bdb60208401611abc565b602082015260408301516040820152611bf660608401611ad2565b6060820152611c0760808401611add565b608082015260a083015182811115611c1e57600080fd5b611c2a87828601611af5565b60a08301525060c083015160c082015260e083015160e0820152610100915081830151828201526101209150611c61828401611ad2565b828201526101409150611c75828401611ad2565b91810191909152949350505050565b600060208284031215611c9657600080fd5b8151610ff5816117b1565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b8781526001600160a01b03878116602083015286811660408301528516606082015260c060808201819052600090611d0490830186611906565b82810360a0840152611d17818587611ca1565b9a9950505050505050505050565b600060208284031215611d3757600080fd5b815167ffffffffffffffff811115611d4e57600080fd5b61165884828501611af5565b8581526001600160a01b03858116602083015284166040820152608060608201819052600090610c319083018486611ca1565b600060208284031215611d9f57600080fd5b5051919050565b602081526000611658602083018486611ca1565b60008219821115611ddb57634e487b7160e01b600052601160045260246000fd5b500190565b600060208284031215611df257600080fd5b81518015158114610ff557600080fd5b60008251611e148184602087016118da565b919091019291505056fea2646970667358221220c001f51198579d4f22b467c439ed49398fab9615cca27af494d5cca2f94cb80364736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c806363453ae1116100ad578063911f94e111610071578063911f94e114610291578063b805232f146102b2578063c43088ef146102c5578063d86ed3e514610308578063f1d640b01461031b57600080fd5b806363453ae1146101ec5780636ff1c9bc146101ff57806385fc009414610212578063884d1f401461026b5780638c415ec01461027e57600080fd5b8063525f45fb116100f4578063525f45fb1461018a57806353be974f1461019d57806353c11f99146101b3578063587d5ff5146101c65780635f9e7d77146101d957600080fd5b8063230dbd29146101265780632a79ac1f1461014f57806330d9c91514610164578063485cc95514610177575b600080fd5b61013961013436600461180f565b61033b565b6040516101469190611932565b60405180910390f35b61016261015d366004611945565b610541565b005b610139610172366004611962565b6105c8565b610162610185366004611a01565b6106ea565b610162610198366004611945565b610802565b60015460ff166040519015158152602001610146565b6101396101c136600461180f565b610851565b6101626101d4366004611a01565b610a79565b6101396101e7366004611962565b610af0565b6101626101fa366004611945565b610c3c565b61016261020d366004611945565b610c8b565b610256610220366004611a01565b6001600160a01b038082166000908152600460209081526040808320938616835260069093019052205463ffffffff1692915050565b60405163ffffffff9091168152602001610146565b610139610279366004611962565b610dbb565b61016261028c366004611a3a565b610ec1565b6102a461029f366004611a01565b610f67565b604051908152602001610146565b6101626102c0366004611a3a565b610ffc565b6102d86102d3366004611945565b611049565b6040805163ffffffff95861681529385166020850152918416918301919091529091166060820152608001610146565b61013961031636600461180f565b6110d1565b6103236111f4565b6040516001600160a01b039091168152602001610146565b6060610345611270565b82828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604051631fb6491d60e11b815294955093733e14dc1b13c488a8d5d310918780c983bd5982e79350633f6c923a92506103b591508590600401611932565b600060405180830381865afa1580156103d2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103fa9190810190611b7d565b606001519050600173__$ef910931ca024c82463a42db5bd87fc301$__635db184489091838d8f6001600160a01b031663ee719bc86040518163ffffffff1660e01b8152600401602060405180830381865afa15801561045e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104829190611c84565b878c8c6040518863ffffffff1660e01b81526004016104a79796959493929190611cca565b600060405180830381865af41580156104c4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104ec9190810190611d25565b604080516001600160a01b03808f168252841660208201529193507f4ec9f5b70e68d6ebc2f85d12348713d1fcae8e25ed8bf5a2a3cf02651cde30bf91015b60405180910390a1509998505050505050505050565b6105496112d5565b61055233611327565b604051630565a89d60e41b8152600160048201526001600160a01b038216602482015273__$ef910931ca024c82463a42db5bd87fc301$__9063565a89d0906044015b60006040518083038186803b1580156105ad57600080fd5b505af41580156105c1573d6000803e3d6000fd5b5050505050565b60606105d2611270565b6105da6112d5565b6000886001600160a01b031663ee719bc86040518163ffffffff1660e01b8152600401602060405180830381865afa15801561061a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063e9190611c84565b6001600160a01b03808216600090815260046020526040902054919250908116908a1681146106c05760405162461bcd60e51b8152602060048201526024808201527f644865646765436f72653a205375706572746f6b656e206e6f7420737570706f6044820152631c9d195960e21b60648201526084015b60405180910390fd5b60408051600060208201520160405160208183030381529060405292505050979650505050505050565b600054610100900460ff1680610703575060005460ff16155b6107665760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106b7565b600054610100900460ff16158015610788576000805461ffff19166101011790555b60018054600280546001600160a01b031916331790556001600160a01b03848116610100026001600160a81b0319909216919091178217909155600380546001600160c01b031916918516918217600160a01b1790556107eb90836000196113f8565b80156107fd576000805461ff00191690555b505050565b61080a6112d5565b60405163394110d160e01b8152600160048201526001600160a01b038216602482015273__$ef910931ca024c82463a42db5bd87fc301$__9063394110d190604401610595565b606061085b611270565b82828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604051631fb6491d60e11b815294955093733e14dc1b13c488a8d5d310918780c983bd5982e79350633f6c923a92506108cb91508590600401611932565b600060405180830381865afa1580156108e8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109109190810190611b7d565b606001519050600173__$ef910931ca024c82463a42db5bd87fc301$__631be212df9091838d8f6001600160a01b031663ee719bc86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610974573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109989190611c84565b878c8c6040518863ffffffff1660e01b81526004016109bd9796959493929190611cca565b600060405180830381865af49250505080156109fb57506040513d6000823e601f3d908101601f191682016040526109f89190810190611d25565b60015b6104ec573d808015610a29576040519150601f19603f3d011682016040523d82523d6000602084013e610a2e565b606091505b50610a38816114e3565b50604080516001600160a01b03808e168252831660208201527f4ec9f5b70e68d6ebc2f85d12348713d1fcae8e25ed8bf5a2a3cf02651cde30bf910161052b565b6040516302e65b1d60e21b81526001600160a01b0383811660048301528216602482015273__$d8f4c298c40046574ed00784bf1ab2bf98$__90630b996c749060440160006040518083038186803b158015610ad457600080fd5b505af4158015610ae8573d6000803e3d6000fd5b505050505050565b6060610afa611270565b600173__$ef910931ca024c82463a42db5bd87fc301$__635ac9370e9091898b6001600160a01b031663ee719bc86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7b9190611c84565b87876040518663ffffffff1660e01b8152600401610b9d959493929190611d5a565b600060405180830381865af4925050508015610bdb57506040513d6000823e601f3d908101601f19168201604052610bd89190810190611d25565b60015b610c2e573d808015610c09576040519150601f19603f3d011682016040523d82523d6000602084013e610c0e565b606091505b50610c18816114e3565b5050604080516000815260208101909152610c31565b90505b979650505050505050565b610c446112d5565b604051630399350760e11b8152600160048201526001600160a01b038216602482015273__$ef910931ca024c82463a42db5bd87fc301$__906307326a0e90604401610595565b610c9433611327565b60025460408051634162169f60e01b81529051610d7c926001600160a01b031691634162169f9160048083019260209291908290030181865afa158015610cdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d039190611c84565b6040516370a0823160e01b81523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa158015610d47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6b9190611d8d565b6001600160a01b0384169190611526565b6040516001600160a01b03821681527f5e7b34819cd91b239220bec92fcfd3c10da2214ba13e4e2b1f6c9cfdbd68a9a29060200160405180910390a150565b6060610dc5611270565b610dcd6112d5565b600173__$ef910931ca024c82463a42db5bd87fc301$__635ac9370e9091898b6001600160a01b031663ee719bc86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4e9190611c84565b87876040518663ffffffff1660e01b8152600401610e70959493929190611d5a565b600060405180830381865af4158015610e8d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610eb59190810190611d25565b98975050505050505050565b610eca33611327565b60015460ff1615610f1d5760405162461bcd60e51b815260206004820152601f60248201527f644865646765436f72653a20506f6f6c20616c7265616479206163746976650060448201526064016106b7565b6001805460ff1916811790556040517f32469476dd301d36094f41aeedb33e89a8dd0ba10ab692329a9cf271f232887990610f5b9084908490611da6565b60405180910390a15050565b604051631740215d60e01b8152600160048201526001600160a01b0380841660248301528216604482015260009073__$ef910931ca024c82463a42db5bd87fc301$__90631740215d90606401602060405180830381865af4158015610fd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff59190611d8d565b9392505050565b61100533611327565b61100d6112d5565b6001805460ff191690556040517f52142d9924affdbcc443234e980cf63b22e87bbc4a88bb571b0cfd1e297edd2d90610f5b9084908490611da6565b6001600160a01b03808216600090815260046020526040812080549192839283928392909116156110ba576001810154600282015460039092015463ffffffff69010000000000000000009283900481169750919092048116945081811693506401000000009091041690506110ca565b6000806000809450945094509450505b9193509193565b60606110db611270565b82828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604051631fb6491d60e11b815294955093733e14dc1b13c488a8d5d310918780c983bd5982e79350633f6c923a925061114b91508590600401611932565b600060405180830381865afa158015611168573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111909190810190611b7d565b606001519050600173__$ef910931ca024c82463a42db5bd87fc301$__632b1737b19091838d8f6001600160a01b031663ee719bc86040518163ffffffff1660e01b8152600401602060405180830381865afa15801561045e573d6000803e3d6000fd5b60405163832a95fd60e01b81526001600482015260009073__$ef910931ca024c82463a42db5bd87fc301$__9063832a95fd90602401602060405180830381865af4158015611247573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126b9190611c84565b905090565b33733e14dc1b13c488a8d5d310918780c983bd5982e7146112d35760405162461bcd60e51b815260206004820181905260248201527f534648656c7065723a20537570706f727473206f6e6c79206f6e6520686f737460448201526064016106b7565b565b60015460ff166112d35760405162461bcd60e51b815260206004820152601960248201527f644865646765436f72653a20506f6f6c20696e6163746976650000000000000060448201526064016106b7565b60025460408051638da5cb5b60e01b815290516001600160a01b0390921691638da5cb5b916004808201926020929091908290030181865afa158015611371573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113959190611c84565b6001600160a01b0316816001600160a01b0316146113f55760405162461bcd60e51b815260206004820152601960248201527f644865646765436f72653a204e6f7420746865206f776e65720000000000000060448201526064016106b7565b50565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015611449573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146d9190611d8d565b6114779190611dba565b6040516001600160a01b0385166024820152604481018290529091506114dd90859063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611556565b50505050565b6113f5816040516024016114f79190611932565b60408051601f198184030181529190526020810180516001600160e01b03166305f3bfab60e11b179052611628565b6040516001600160a01b0383166024820152604481018290526107fd90849063a9059cbb60e01b906064016114a6565b60006115ab826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166116499092919063ffffffff16565b8051909150156107fd57808060200190518101906115c99190611de0565b6107fd5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106b7565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b60606116588484600085611660565b949350505050565b6060824710156116c15760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106b7565b843b61170f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106b7565b600080866001600160a01b0316858760405161172b9190611e02565b60006040518083038185875af1925050503d8060008114611768576040519150601f19603f3d011682016040523d82523d6000602084013e61176d565b606091505b5091509150610c3182828660608315611787575081610ff5565b8251156117975782518084602001fd5b8160405162461bcd60e51b81526004016106b79190611932565b6001600160a01b03811681146113f557600080fd5b60008083601f8401126117d857600080fd5b50813567ffffffffffffffff8111156117f057600080fd5b60208301915083602082850101111561180857600080fd5b9250929050565b600080600080600080600080600060c08a8c03121561182d57600080fd5b8935611838816117b1565b985060208a0135611848816117b1565b975060408a0135965060608a013567ffffffffffffffff8082111561186c57600080fd5b6118788d838e016117c6565b909850965060808c013591508082111561189157600080fd5b61189d8d838e016117c6565b909650945060a08c01359150808211156118b657600080fd5b506118c38c828d016117c6565b915080935050809150509295985092959850929598565b60005b838110156118f55781810151838201526020016118dd565b838111156114dd5750506000910152565b6000815180845261191e8160208601602086016118da565b601f01601f19169290920160200192915050565b602081526000610ff56020830184611906565b60006020828403121561195757600080fd5b8135610ff5816117b1565b600080600080600080600060a0888a03121561197d57600080fd5b8735611988816117b1565b96506020880135611998816117b1565b955060408801359450606088013567ffffffffffffffff808211156119bc57600080fd5b6119c88b838c016117c6565b909650945060808a01359150808211156119e157600080fd5b506119ee8a828b016117c6565b989b979a50959850939692959293505050565b60008060408385031215611a1457600080fd5b8235611a1f816117b1565b91506020830135611a2f816117b1565b809150509250929050565b60008060208385031215611a4d57600080fd5b823567ffffffffffffffff811115611a6457600080fd5b611a70858286016117c6565b90969095509350505050565b634e487b7160e01b600052604160045260246000fd5b604051610160810167ffffffffffffffff81118282101715611ab657611ab6611a7c565b60405290565b805160ff81168114611acd57600080fd5b919050565b8051611acd816117b1565b80516001600160e01b031981168114611acd57600080fd5b600082601f830112611b0657600080fd5b815167ffffffffffffffff80821115611b2157611b21611a7c565b604051601f8301601f19908116603f01168101908282118183101715611b4957611b49611a7c565b81604052838152866020858801011115611b6257600080fd5b611b738460208301602089016118da565b9695505050505050565b600060208284031215611b8f57600080fd5b815167ffffffffffffffff80821115611ba757600080fd5b908301906101608286031215611bbc57600080fd5b611bc4611a92565b611bcd83611abc565b8152611bdb60208401611abc565b602082015260408301516040820152611bf660608401611ad2565b6060820152611c0760808401611add565b608082015260a083015182811115611c1e57600080fd5b611c2a87828601611af5565b60a08301525060c083015160c082015260e083015160e0820152610100915081830151828201526101209150611c61828401611ad2565b828201526101409150611c75828401611ad2565b91810191909152949350505050565b600060208284031215611c9657600080fd5b8151610ff5816117b1565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b8781526001600160a01b03878116602083015286811660408301528516606082015260c060808201819052600090611d0490830186611906565b82810360a0840152611d17818587611ca1565b9a9950505050505050505050565b600060208284031215611d3757600080fd5b815167ffffffffffffffff811115611d4e57600080fd5b61165884828501611af5565b8581526001600160a01b03858116602083015284166040820152608060608201819052600090610c319083018486611ca1565b600060208284031215611d9f57600080fd5b5051919050565b602081526000611658602083018486611ca1565b60008219821115611ddb57634e487b7160e01b600052601160045260246000fd5b500190565b600060208284031215611df257600080fd5b81518015158114610ff557600080fd5b60008251611e148184602087016118da565b919091019291505056fea2646970667358221220c001f51198579d4f22b467c439ed49398fab9615cca27af494d5cca2f94cb80364736f6c634300080a0033",
  "libraries": {
    "SFHelper": "0xfF666F7971C55A963a048AdDb46f0B85E445Fa92",
    "dHedgeStorage": "0xd8ce56734aaA38E9f647003189a57b9b3928e01b",
    "dHedgeHelper": "0xB354eb06CD6d0E83F17c50d253A56CCdB91B9886"
  },
  "devdoc": {
    "author": "rashtrakoff <rashtrakoff@pm.me>.",
    "custom:experimental": "This is an experimental contract/library. Use at your own risk.",
    "kind": "dev",
    "methods": {
      "beforeAgreementCreated(address,address,bytes32,bytes,bytes)": {
        "details": "TODO Check if `_onlyExpected` is even required."
      },
      "calcUserUninvested(address,address)": {
        "params": {
          "_token": "Address of the underlying token.",
          "_user": "Address of the user whose uninvested amount needs to be calculated."
        },
        "returns": {
          "_0": "Amount of uninvested tokens."
        }
      },
      "checkCoreActive()": {
        "returns": {
          "_0": "Boolean indicating working status of core."
        }
      },
      "dHedgeDeposit(address)": {
        "params": {
          "_token": "Address of the underlying token to be deposited into dHedge pool."
        }
      },
      "deactivateCore(string)": {
        "params": {
          "_message": "Message reason for reactivation of the core."
        }
      },
      "distribute(address)": {
        "params": {
          "_token": "Address of the underlying token."
        }
      },
      "emergencyCloseStream(address,address)": {
        "params": {
          "_superToken": "Supertoken being streamed.",
          "_user": "Address of the user whose stream needs to be closed."
        }
      },
      "emergencyWithdraw(address)": {
        "params": {
          "_token": "Address of the pool token. TODO Remove/Modify this function after testing"
        }
      },
      "getTokenDistIndices(address)": {
        "params": {
          "_token": "Address of a deposit token."
        },
        "returns": {
          "_0": "Index ID of first permanent index.",
          "_1": "Index ID of second permanent index.",
          "_2": "Index ID of temporary index.",
          "_3": "Index ID of the locked index."
        }
      },
      "getUserDistIndex(address,address)": {
        "params": {
          "_token": "Address of the underlying token for which the permanent distribution index ID is required.",
          "_user": "Address of the user."
        },
        "returns": {
          "_0": "Assigned permanent distribution index ID."
        }
      },
      "initStreamToken(address)": {
        "params": {
          "_superToken": "Supertoken of the underlying token we wish to stream."
        }
      },
      "initialize(address,address)": {
        "details": "Initialize the factory.",
        "params": {
          "_DHPTx": "Supertoken corresponding to the DHPT of the pool",
          "_dHedgePool": "dHEDGE pool contract address."
        }
      },
      "reactivateCore(string)": {
        "params": {
          "_message": "Message reason for reactivation of the core."
        }
      },
      "requireUpkeep()": {
        "returns": {
          "_0": "Address of the underlying/deposit token which needs to be deposited to the dHedge pool."
        }
      }
    },
    "title": "Core contract for streaming into a dHedge pool.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calcUserUninvested(address,address)": {
        "notice": "Calculates uninvested token amount of a particular user."
      },
      "checkCoreActive()": {
        "notice": "Checks if the core is active or not."
      },
      "dHedgeDeposit(address)": {
        "notice": "Converts supertokens to underlying tokens and deposits them into dHedge pool."
      },
      "deactivateCore(string)": {
        "notice": "Deactivates a dHedgeCore contract."
      },
      "distribute(address)": {
        "notice": "Distributes the DHPTx corresponding to a underlying token's deposits."
      },
      "emergencyCloseStream(address,address)": {
        "notice": "Closes a supertoken stream if core is jailed or user is running low on balance. Any user's stream can be closed by anyone provided the app is jailed- or user doesn't have enough amount to stream for more than 12 hours."
      },
      "emergencyWithdraw(address)": {
        "notice": "Function to withdraw a token in case of emergency."
      },
      "getTokenDistIndices(address)": {
        "notice": "Gets the distribution indices corresponding to an underlying token."
      },
      "getUserDistIndex(address,address)": {
        "notice": "Gets a user's assigned permanent distribution index for a supertoken stream."
      },
      "initStreamToken(address)": {
        "notice": "Initialises an underlying token and it's supertoken for streaming into dHEDGE pool."
      },
      "reactivateCore(string)": {
        "notice": "Reactivates a dHedgeCore contract."
      },
      "requireUpkeep()": {
        "notice": "Checks if deposit action can be performed."
      }
    },
    "notice": "Contains user facing functions.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 189,
        "contract": "contracts/dHedge-Factory-Version/dHedgeCore.sol:dHedgeCore",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 192,
        "contract": "contracts/dHedge-Factory-Version/dHedgeCore.sol:dHedgeCore",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6265,
        "contract": "contracts/dHedge-Factory-Version/dHedgeCore.sol:dHedgeCore",
        "label": "poolData",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(dHedgePool)6221_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ISuperToken)2518": {
        "encoding": "inplace",
        "label": "contract ISuperToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(TokenData)6202_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct dHedgeStorage.TokenData)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenData)6202_storage"
      },
      "t_mapping(t_address,t_uint32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_struct(PermIndexData)6180_storage": {
        "encoding": "inplace",
        "label": "struct dHedgeStorage.PermIndexData",
        "members": [
          {
            "astId": 6175,
            "contract": "contracts/dHedge-Factory-Version/dHedgeCore.sol:dHedgeCore",
            "label": "isActive",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 6177,
            "contract": "contracts/dHedge-Factory-Version/dHedgeCore.sol:dHedgeCore",
            "label": "lastDepositAt",
            "offset": 1,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 6179,
            "contract": "contracts/dHedge-Factory-Version/dHedgeCore.sol:dHedgeCore",
            "label": "indexId",
            "offset": 9,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TokenData)6202_storage": {
        "encoding": "inplace",
        "label": "struct dHedgeStorage.TokenData",
        "members": [
          {
            "astId": 6183,
            "contract": "contracts/dHedge-Factory-Version/dHedgeCore.sol:dHedgeCore",
            "label": "superToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(ISuperToken)2518"
          },
          {
            "astId": 6186,
            "contract": "contracts/dHedge-Factory-Version/dHedgeCore.sol:dHedgeCore",
            "label": "permDistIndex1",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(PermIndexData)6180_storage"
          },
          {
            "astId": 6189,
            "contract": "contracts/dHedge-Factory-Version/dHedgeCore.sol:dHedgeCore",
            "label": "permDistIndex2",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(PermIndexData)6180_storage"
          },
          {
            "astId": 6191,
            "contract": "contracts/dHedge-Factory-Version/dHedgeCore.sol:dHedgeCore",
            "label": "tempDistIndex",
            "offset": 0,
            "slot": "3",
            "type": "t_uint32"
          },
          {
            "astId": 6193,
            "contract": "contracts/dHedge-Factory-Version/dHedgeCore.sol:dHedgeCore",
            "label": "lockedIndexId",
            "offset": 4,
            "slot": "3",
            "type": "t_uint32"
          },
          {
            "astId": 6195,
            "contract": "contracts/dHedge-Factory-Version/dHedgeCore.sol:dHedgeCore",
            "label": "distAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6197,
            "contract": "contracts/dHedge-Factory-Version/dHedgeCore.sol:dHedgeCore",
            "label": "tempDistAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6201,
            "contract": "contracts/dHedge-Factory-Version/dHedgeCore.sol:dHedgeCore",
            "label": "assignedIndex",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_uint32)"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(dHedgePool)6221_storage": {
        "encoding": "inplace",
        "label": "struct dHedgeStorage.dHedgePool",
        "members": [
          {
            "astId": 6204,
            "contract": "contracts/dHedge-Factory-Version/dHedgeCore.sol:dHedgeCore",
            "label": "isActive",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 6207,
            "contract": "contracts/dHedge-Factory-Version/dHedgeCore.sol:dHedgeCore",
            "label": "DHPTx",
            "offset": 1,
            "slot": "0",
            "type": "t_contract(ISuperToken)2518"
          },
          {
            "astId": 6209,
            "contract": "contracts/dHedge-Factory-Version/dHedgeCore.sol:dHedgeCore",
            "label": "factory",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6211,
            "contract": "contracts/dHedge-Factory-Version/dHedgeCore.sol:dHedgeCore",
            "label": "poolLogic",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 6213,
            "contract": "contracts/dHedge-Factory-Version/dHedgeCore.sol:dHedgeCore",
            "label": "latestDistIndex",
            "offset": 20,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 6215,
            "contract": "contracts/dHedge-Factory-Version/dHedgeCore.sol:dHedgeCore",
            "label": "lastDepositAt",
            "offset": 24,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 6220,
            "contract": "contracts/dHedge-Factory-Version/dHedgeCore.sol:dHedgeCore",
            "label": "tokenData",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_struct(TokenData)6202_storage)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}