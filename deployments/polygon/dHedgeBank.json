{
  "address": "0xF01696558f28CB1676Fca25f3A3C16b0951366b6",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x227fa1e7ddebb46441b9e4352284e7f8f74f5cbce42333a61db96ef5174c4aa7",
  "receipt": {
    "to": null,
    "from": "0x452181dAe31Cf9f42189df71eC64298993BEe6d3",
    "contractAddress": "0xF01696558f28CB1676Fca25f3A3C16b0951366b6",
    "transactionIndex": 0,
    "gasUsed": "1313694",
    "logsBloom": "0x
    "blockHash": "0x4d76a268097ba82031ca6e3524e008912b0de486fac98554a6fbe027ace091e0",
    "transactionHash": "0x227fa1e7ddebb46441b9e4352284e7f8f74f5cbce42333a61db96ef5174c4aa7",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 21741539,
        "transactionHash": "0x227fa1e7ddebb46441b9e4352284e7f8f74f5cbce42333a61db96ef5174c4aa7",
        "address": "0xF01696558f28CB1676Fca25f3A3C16b0951366b6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000452181dae31cf9f42189df71ec64298993bee6d3"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x4d76a268097ba82031ca6e3524e008912b0de486fac98554a6fbe027ace091e0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 21741539,
        "transactionHash": "0x227fa1e7ddebb46441b9e4352284e7f8f74f5cbce42333a61db96ef5174c4aa7",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000452181dae31cf9f42189df71ec64298993bee6d3",
          "0x0000000000000000000000007b5000af8ab69fd59eb0d4f5762bff57c9c04385"
        ],
        "data": "0x00000000000000000000000000000000000000000000000005782751e01190000000000000000000000000000000000000000000000000000a06738801df6276000000000000000000000000000000000000000000007fb2637d88ec0700c34c000000000000000000000000000000000000000000000000048e4c3621cdd276000000000000000000000000000000000000000000007fb268f5b03de712534c",
        "logIndex": 1,
        "blockHash": "0x4d76a268097ba82031ca6e3524e008912b0de486fac98554a6fbe027ace091e0"
      }
    ],
    "blockNumber": 21741539,
    "cumulativeGasUsed": "1313694",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "be940b30be6d1724127a475521c42438",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"rashtrakoff\",\"custom:experimental\":\"This is an experimental contract/library. Use at your own risk.\",\"details\":\"Accounts for LP tokens received by different core contracts\",\"kind\":\"dev\",\"methods\":{\"deposit(address,uint256)\":{\"details\":\"Function called by core contracts for depositing their LP tokens\",\"params\":{\"_amount\":\"Amount of LP tokens to be deposited\",\"_poolToken\":\"Address of the dHedge pool\"}},\"emergencyWithdraw(address)\":{\"details\":\"Function to withdraw a token in case of emergency\",\"params\":{\"_token\":\"Address of the pool token Remove/Modify this function after testing\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(address,address,uint256)\":{\"details\":\"Function called by core contracts to transfer LP tokens to investors\",\"params\":{\"_amount\":\"Amount of tokens to be transferred to the user\",\"_poolToken\":\"Address of the dHedge pool\",\"_user\":\"Address of the user to whom LP tokens are to be transferred\"}}},\"title\":\"dHedge bank contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dHedge/dHedgeBank.sol\":\"dHedgeBank\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/dHedge/Interfaces/ISuperdHedge.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.4;\\n\\ninterface IdHedgeCore {\\n    function dHedgeDeposit() external;\\n\\n    function checkPoolActive() external view returns (bool);\\n\\n    function requireUpkeep() external view returns (bool);\\n}\\n\\ninterface IdHedgeBank {\\n    function deposit(address _poolToken, uint256 _amount) external;\\n\\n    function withdraw(\\n        address _poolToken,\\n        address _user,\\n        uint256 _amount\\n    ) external;\\n}\\n\\ninterface IdHedgeUpkeep {\\n    event CoreAdded(address _dHedgeCore, uint256 _timestamp);\\n    event CoreRemoved(address _dHedgeCore, uint256 _timestamp);\\n    event DepositCalled(address _dHedgeCore, uint256 _timestamp);\\n\\n    function callFunction(address _contract) external;\\n\\n    function checker()\\n        external\\n        view\\n        returns (bool _canExec, bytes memory _execPayload);\\n}\\n\",\"keccak256\":\"0x44ba002a0e16682d90fea2048eb08cba49654c2eee8c3b557fa2b99b8ae8feec\",\"license\":\"Unlicensed\"},\"contracts/dHedge/dHedgeBank.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.4;\\n\\nimport {IdHedgeBank} from \\\"./Interfaces/ISuperdHedge.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title dHedge bank contract\\n * @author rashtrakoff\\n * @dev Accounts for LP tokens received by different core contracts\\n * @custom:experimental This is an experimental contract/library. Use at your own risk.\\n */\\n// solhint-disable reason-string\\n// solhint-disable-next-line contract-name-camelcase\\ncontract dHedgeBank is Ownable, IdHedgeBank {\\n    using SafeERC20 for IERC20;\\n\\n    mapping(address => mapping(address => uint256)) private depositContracts;\\n\\n    /// @dev Function called by core contracts for depositing their LP tokens\\n    /// @param _poolToken Address of the dHedge pool\\n    /// @param _amount Amount of LP tokens to be deposited\\n    function deposit(address _poolToken, uint256 _amount) external override {\\n        require(\\n            _isContract(msg.sender),\\n            \\\"dHedgeBank: Depositor not a contract\\\"\\n        );\\n        require(\\n            Ownable(msg.sender).owner() == owner(),\\n            \\\"dHedgeBank: Owner of deposit contract not authorised\\\"\\n        );\\n\\n        IERC20(_poolToken).safeTransferFrom(msg.sender, address(this), _amount);\\n        depositContracts[msg.sender][_poolToken] += _amount;\\n    }\\n\\n    /// @dev Function called by core contracts to transfer LP tokens to investors\\n    /// @param _poolToken Address of the dHedge pool\\n    /// @param _user Address of the user to whom LP tokens are to be transferred\\n    /// @param _amount Amount of tokens to be transferred to the user\\n    function withdraw(\\n        address _poolToken,\\n        address _user,\\n        uint256 _amount\\n    ) external override {\\n        require(\\n            _isContract(msg.sender),\\n            \\\"dHedgeBank: Withdrawer not a contract\\\"\\n        );\\n        require(\\n            Ownable(msg.sender).owner() == owner(),\\n            \\\"dHedgeBank: Owner of deposit contract not authorised\\\"\\n        );\\n        require(\\n            depositContracts[msg.sender][_poolToken] >= _amount,\\n            \\\"dHedgeBank: Amount exceeds limit\\\"\\n        );\\n\\n        depositContracts[msg.sender][_poolToken] -= _amount;\\n        IERC20(_poolToken).safeTransfer(_user, _amount);\\n    }\\n\\n    /// @dev Function to withdraw a token in case of emergency\\n    /// @param _token Address of the pool token\\n    /// Remove/Modify this function after testing\\n    function emergencyWithdraw(address _token) external onlyOwner {\\n        IERC20(_token).safeTransfer(\\n            owner(),\\n            IERC20(_token).balanceOf(address(this))\\n        );\\n    }\\n\\n    /// @dev Checks if a given address is a contract or not\\n    /// @param account Address of the account\\n    function _isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        /* solhint-disable no-inline-assembly */\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n        /* solhint-enable no-inline-assembly */\\n    }\\n}\\n\",\"keccak256\":\"0xf89b7b0998505c06a73c6768fbffad60162522d8b6e15379b8b8aa8c2f0c4bb5\",\"license\":\"Unlicensed\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61166c8061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806347e7ef24146100675780636ff1c9bc14610083578063715018a61461009f5780638da5cb5b146100a9578063d9caed12146100c7578063f2fde38b146100e3575b600080fd5b610081600480360381019061007c9190610e00565b6100ff565b005b61009d60048036038101906100989190610d5f565b6102fd565b005b6100a7610436565b005b6100b16104be565b6040516100be9190611068565b60405180910390f35b6100e160048036038101906100dc9190610db1565b6104e7565b005b6100fd60048036038101906100f89190610d5f565b6107a3565b005b6101083361089b565b610147576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013e906111e5565b60405180910390fd5b61014f6104be565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156101ab57600080fd5b505afa1580156101bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e39190610d88565b73ffffffffffffffffffffffffffffffffffffffff1614610239576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023090611205565b60405180910390fd5b6102663330838573ffffffffffffffffffffffffffffffffffffffff166108ae909392919063ffffffff16565b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102f29190611257565b925050819055505050565b610305610937565b73ffffffffffffffffffffffffffffffffffffffff166103236104be565b73ffffffffffffffffffffffffffffffffffffffff1614610379576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037090611185565b60405180910390fd5b6104336103846104be565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103bd9190611068565b60206040518083038186803b1580156103d557600080fd5b505afa1580156103e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040d9190610e65565b8373ffffffffffffffffffffffffffffffffffffffff1661093f9092919063ffffffff16565b50565b61043e610937565b73ffffffffffffffffffffffffffffffffffffffff1661045c6104be565b73ffffffffffffffffffffffffffffffffffffffff16146104b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a990611185565b60405180910390fd5b6104bc60006109c5565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6104f03361089b565b61052f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052690611165565b60405180910390fd5b6105376104be565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561059357600080fd5b505afa1580156105a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cb9190610d88565b73ffffffffffffffffffffffffffffffffffffffff1614610621576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061890611205565b60405180910390fd5b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156106e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d790611125565b60405180910390fd5b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461076c91906112ad565b9250508190555061079e82828573ffffffffffffffffffffffffffffffffffffffff1661093f9092919063ffffffff16565b505050565b6107ab610937565b73ffffffffffffffffffffffffffffffffffffffff166107c96104be565b73ffffffffffffffffffffffffffffffffffffffff161461081f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081690611185565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561088f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088690611105565b60405180910390fd5b610898816109c5565b50565b600080823b905060008111915050919050565b610931846323b872dd60e01b8585856040516024016108cf93929190611083565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610a89565b50505050565b600033905090565b6109c08363a9059cbb60e01b848460405160240161095e9291906110ba565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610a89565b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000610aeb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610b509092919063ffffffff16565b9050600081511115610b4b5780806020019051810190610b0b9190610e3c565b610b4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b41906111c5565b60405180910390fd5b5b505050565b6060610b5f8484600085610b68565b90509392505050565b606082471015610bad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba490611145565b60405180910390fd5b610bb685610c7c565b610bf5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bec906111a5565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610c1e9190611051565b60006040518083038185875af1925050503d8060008114610c5b576040519150601f19603f3d011682016040523d82523d6000602084013e610c60565b606091505b5091509150610c70828286610c8f565b92505050949350505050565b600080823b905060008111915050919050565b60608315610c9f57829050610cef565b600083511115610cb25782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce691906110e3565b60405180910390fd5b9392505050565b600081359050610d05816115f1565b92915050565b600081519050610d1a816115f1565b92915050565b600081519050610d2f81611608565b92915050565b600081359050610d448161161f565b92915050565b600081519050610d598161161f565b92915050565b600060208284031215610d7157600080fd5b6000610d7f84828501610cf6565b91505092915050565b600060208284031215610d9a57600080fd5b6000610da884828501610d0b565b91505092915050565b600080600060608486031215610dc657600080fd5b6000610dd486828701610cf6565b9350506020610de586828701610cf6565b9250506040610df686828701610d35565b9150509250925092565b60008060408385031215610e1357600080fd5b6000610e2185828601610cf6565b9250506020610e3285828601610d35565b9150509250929050565b600060208284031215610e4e57600080fd5b6000610e5c84828501610d20565b91505092915050565b600060208284031215610e7757600080fd5b6000610e8584828501610d4a565b91505092915050565b610e97816112e1565b82525050565b6000610ea882611225565b610eb2818561123b565b9350610ec2818560208601611329565b80840191505092915050565b6000610ed982611230565b610ee38185611246565b9350610ef3818560208601611329565b610efc8161138b565b840191505092915050565b6000610f14602683611246565b9150610f1f8261139c565b604082019050919050565b6000610f37602083611246565b9150610f42826113eb565b602082019050919050565b6000610f5a602683611246565b9150610f6582611414565b604082019050919050565b6000610f7d602583611246565b9150610f8882611463565b604082019050919050565b6000610fa0602083611246565b9150610fab826114b2565b602082019050919050565b6000610fc3601d83611246565b9150610fce826114db565b602082019050919050565b6000610fe6602a83611246565b9150610ff182611504565b604082019050919050565b6000611009602483611246565b915061101482611553565b604082019050919050565b600061102c603483611246565b9150611037826115a2565b604082019050919050565b61104b8161131f565b82525050565b600061105d8284610e9d565b915081905092915050565b600060208201905061107d6000830184610e8e565b92915050565b60006060820190506110986000830186610e8e565b6110a56020830185610e8e565b6110b26040830184611042565b949350505050565b60006040820190506110cf6000830185610e8e565b6110dc6020830184611042565b9392505050565b600060208201905081810360008301526110fd8184610ece565b905092915050565b6000602082019050818103600083015261111e81610f07565b9050919050565b6000602082019050818103600083015261113e81610f2a565b9050919050565b6000602082019050818103600083015261115e81610f4d565b9050919050565b6000602082019050818103600083015261117e81610f70565b9050919050565b6000602082019050818103600083015261119e81610f93565b9050919050565b600060208201905081810360008301526111be81610fb6565b9050919050565b600060208201905081810360008301526111de81610fd9565b9050919050565b600060208201905081810360008301526111fe81610ffc565b9050919050565b6000602082019050818103600083015261121e8161101f565b9050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006112628261131f565b915061126d8361131f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156112a2576112a161135c565b5b828201905092915050565b60006112b88261131f565b91506112c38361131f565b9250828210156112d6576112d561135c565b5b828203905092915050565b60006112ec826112ff565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b8381101561134757808201518184015260208101905061132c565b83811115611356576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f64486564676542616e6b3a20416d6f756e742065786365656473206c696d6974600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f64486564676542616e6b3a2057697468647261776572206e6f74206120636f6e60008201527f7472616374000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f64486564676542616e6b3a204465706f7369746f72206e6f74206120636f6e7460008201527f7261637400000000000000000000000000000000000000000000000000000000602082015250565b7f64486564676542616e6b3a204f776e6572206f66206465706f73697420636f6e60008201527f7472616374206e6f7420617574686f7269736564000000000000000000000000602082015250565b6115fa816112e1565b811461160557600080fd5b50565b611611816112f3565b811461161c57600080fd5b50565b6116288161131f565b811461163357600080fd5b5056fea2646970667358221220fdeb98167ec468315c9161284e639f2f4fce547fce953eef36ead8f42544b45f64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c806347e7ef24146100675780636ff1c9bc14610083578063715018a61461009f5780638da5cb5b146100a9578063d9caed12146100c7578063f2fde38b146100e3575b600080fd5b610081600480360381019061007c9190610e00565b6100ff565b005b61009d60048036038101906100989190610d5f565b6102fd565b005b6100a7610436565b005b6100b16104be565b6040516100be9190611068565b60405180910390f35b6100e160048036038101906100dc9190610db1565b6104e7565b005b6100fd60048036038101906100f89190610d5f565b6107a3565b005b6101083361089b565b610147576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013e906111e5565b60405180910390fd5b61014f6104be565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156101ab57600080fd5b505afa1580156101bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e39190610d88565b73ffffffffffffffffffffffffffffffffffffffff1614610239576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023090611205565b60405180910390fd5b6102663330838573ffffffffffffffffffffffffffffffffffffffff166108ae909392919063ffffffff16565b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102f29190611257565b925050819055505050565b610305610937565b73ffffffffffffffffffffffffffffffffffffffff166103236104be565b73ffffffffffffffffffffffffffffffffffffffff1614610379576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037090611185565b60405180910390fd5b6104336103846104be565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103bd9190611068565b60206040518083038186803b1580156103d557600080fd5b505afa1580156103e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040d9190610e65565b8373ffffffffffffffffffffffffffffffffffffffff1661093f9092919063ffffffff16565b50565b61043e610937565b73ffffffffffffffffffffffffffffffffffffffff1661045c6104be565b73ffffffffffffffffffffffffffffffffffffffff16146104b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a990611185565b60405180910390fd5b6104bc60006109c5565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6104f03361089b565b61052f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052690611165565b60405180910390fd5b6105376104be565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561059357600080fd5b505afa1580156105a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cb9190610d88565b73ffffffffffffffffffffffffffffffffffffffff1614610621576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061890611205565b60405180910390fd5b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156106e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d790611125565b60405180910390fd5b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461076c91906112ad565b9250508190555061079e82828573ffffffffffffffffffffffffffffffffffffffff1661093f9092919063ffffffff16565b505050565b6107ab610937565b73ffffffffffffffffffffffffffffffffffffffff166107c96104be565b73ffffffffffffffffffffffffffffffffffffffff161461081f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081690611185565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561088f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088690611105565b60405180910390fd5b610898816109c5565b50565b600080823b905060008111915050919050565b610931846323b872dd60e01b8585856040516024016108cf93929190611083565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610a89565b50505050565b600033905090565b6109c08363a9059cbb60e01b848460405160240161095e9291906110ba565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610a89565b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000610aeb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610b509092919063ffffffff16565b9050600081511115610b4b5780806020019051810190610b0b9190610e3c565b610b4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b41906111c5565b60405180910390fd5b5b505050565b6060610b5f8484600085610b68565b90509392505050565b606082471015610bad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba490611145565b60405180910390fd5b610bb685610c7c565b610bf5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bec906111a5565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610c1e9190611051565b60006040518083038185875af1925050503d8060008114610c5b576040519150601f19603f3d011682016040523d82523d6000602084013e610c60565b606091505b5091509150610c70828286610c8f565b92505050949350505050565b600080823b905060008111915050919050565b60608315610c9f57829050610cef565b600083511115610cb25782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce691906110e3565b60405180910390fd5b9392505050565b600081359050610d05816115f1565b92915050565b600081519050610d1a816115f1565b92915050565b600081519050610d2f81611608565b92915050565b600081359050610d448161161f565b92915050565b600081519050610d598161161f565b92915050565b600060208284031215610d7157600080fd5b6000610d7f84828501610cf6565b91505092915050565b600060208284031215610d9a57600080fd5b6000610da884828501610d0b565b91505092915050565b600080600060608486031215610dc657600080fd5b6000610dd486828701610cf6565b9350506020610de586828701610cf6565b9250506040610df686828701610d35565b9150509250925092565b60008060408385031215610e1357600080fd5b6000610e2185828601610cf6565b9250506020610e3285828601610d35565b9150509250929050565b600060208284031215610e4e57600080fd5b6000610e5c84828501610d20565b91505092915050565b600060208284031215610e7757600080fd5b6000610e8584828501610d4a565b91505092915050565b610e97816112e1565b82525050565b6000610ea882611225565b610eb2818561123b565b9350610ec2818560208601611329565b80840191505092915050565b6000610ed982611230565b610ee38185611246565b9350610ef3818560208601611329565b610efc8161138b565b840191505092915050565b6000610f14602683611246565b9150610f1f8261139c565b604082019050919050565b6000610f37602083611246565b9150610f42826113eb565b602082019050919050565b6000610f5a602683611246565b9150610f6582611414565b604082019050919050565b6000610f7d602583611246565b9150610f8882611463565b604082019050919050565b6000610fa0602083611246565b9150610fab826114b2565b602082019050919050565b6000610fc3601d83611246565b9150610fce826114db565b602082019050919050565b6000610fe6602a83611246565b9150610ff182611504565b604082019050919050565b6000611009602483611246565b915061101482611553565b604082019050919050565b600061102c603483611246565b9150611037826115a2565b604082019050919050565b61104b8161131f565b82525050565b600061105d8284610e9d565b915081905092915050565b600060208201905061107d6000830184610e8e565b92915050565b60006060820190506110986000830186610e8e565b6110a56020830185610e8e565b6110b26040830184611042565b949350505050565b60006040820190506110cf6000830185610e8e565b6110dc6020830184611042565b9392505050565b600060208201905081810360008301526110fd8184610ece565b905092915050565b6000602082019050818103600083015261111e81610f07565b9050919050565b6000602082019050818103600083015261113e81610f2a565b9050919050565b6000602082019050818103600083015261115e81610f4d565b9050919050565b6000602082019050818103600083015261117e81610f70565b9050919050565b6000602082019050818103600083015261119e81610f93565b9050919050565b600060208201905081810360008301526111be81610fb6565b9050919050565b600060208201905081810360008301526111de81610fd9565b9050919050565b600060208201905081810360008301526111fe81610ffc565b9050919050565b6000602082019050818103600083015261121e8161101f565b9050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006112628261131f565b915061126d8361131f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156112a2576112a161135c565b5b828201905092915050565b60006112b88261131f565b91506112c38361131f565b9250828210156112d6576112d561135c565b5b828203905092915050565b60006112ec826112ff565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b8381101561134757808201518184015260208101905061132c565b83811115611356576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f64486564676542616e6b3a20416d6f756e742065786365656473206c696d6974600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f64486564676542616e6b3a2057697468647261776572206e6f74206120636f6e60008201527f7472616374000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f64486564676542616e6b3a204465706f7369746f72206e6f74206120636f6e7460008201527f7261637400000000000000000000000000000000000000000000000000000000602082015250565b7f64486564676542616e6b3a204f776e6572206f66206465706f73697420636f6e60008201527f7472616374206e6f7420617574686f7269736564000000000000000000000000602082015250565b6115fa816112e1565b811461160557600080fd5b50565b611611816112f3565b811461161c57600080fd5b50565b6116288161131f565b811461163357600080fd5b5056fea2646970667358221220fdeb98167ec468315c9161284e639f2f4fce547fce953eef36ead8f42544b45f64736f6c63430008040033",
  "devdoc": {
    "author": "rashtrakoff",
    "custom:experimental": "This is an experimental contract/library. Use at your own risk.",
    "details": "Accounts for LP tokens received by different core contracts",
    "kind": "dev",
    "methods": {
      "deposit(address,uint256)": {
        "details": "Function called by core contracts for depositing their LP tokens",
        "params": {
          "_amount": "Amount of LP tokens to be deposited",
          "_poolToken": "Address of the dHedge pool"
        }
      },
      "emergencyWithdraw(address)": {
        "details": "Function to withdraw a token in case of emergency",
        "params": {
          "_token": "Address of the pool token Remove/Modify this function after testing"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(address,address,uint256)": {
        "details": "Function called by core contracts to transfer LP tokens to investors",
        "params": {
          "_amount": "Amount of tokens to be transferred to the user",
          "_poolToken": "Address of the dHedge pool",
          "_user": "Address of the user to whom LP tokens are to be transferred"
        }
      }
    },
    "title": "dHedge bank contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/dHedge/dHedgeBank.sol:dHedgeBank",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5026,
        "contract": "contracts/dHedge/dHedgeBank.sol:dHedgeBank",
        "label": "depositContracts",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}